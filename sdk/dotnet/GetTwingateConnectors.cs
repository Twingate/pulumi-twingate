// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Twingate
{
    public static class GetTwingateConnectors
    {
        /// <summary>
        /// Connectors provide connectivity to Remote Networks. For more information, see Twingate's [documentation](https://docs.twingate.com/docs/understanding-access-nodes).
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Twingate = Pulumi.Twingate;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all = Twingate.GetTwingateConnectors.Invoke(new()
        ///     {
        ///         Name = "&lt;your connector's name&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetTwingateConnectorsResult> InvokeAsync(GetTwingateConnectorsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTwingateConnectorsResult>("twingate:index/getTwingateConnectors:getTwingateConnectors", args ?? new GetTwingateConnectorsArgs(), options.WithDefaults());

        /// <summary>
        /// Connectors provide connectivity to Remote Networks. For more information, see Twingate's [documentation](https://docs.twingate.com/docs/understanding-access-nodes).
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Twingate = Pulumi.Twingate;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all = Twingate.GetTwingateConnectors.Invoke(new()
        ///     {
        ///         Name = "&lt;your connector's name&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetTwingateConnectorsResult> Invoke(GetTwingateConnectorsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTwingateConnectorsResult>("twingate:index/getTwingateConnectors:getTwingateConnectors", args ?? new GetTwingateConnectorsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTwingateConnectorsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Name of the Connector.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Match when the value exist in the name of the connector.
        /// </summary>
        [Input("nameContains")]
        public string? NameContains { get; set; }

        /// <summary>
        /// Match when the exact value does not exist in the name of the connector.
        /// </summary>
        [Input("nameExclude")]
        public string? NameExclude { get; set; }

        /// <summary>
        /// The name of the connector must start with the value.
        /// </summary>
        [Input("namePrefix")]
        public string? NamePrefix { get; set; }

        /// <summary>
        /// The regular expression match of the name of the connector.
        /// </summary>
        [Input("nameRegexp")]
        public string? NameRegexp { get; set; }

        /// <summary>
        /// The name of the connector must end with the value.
        /// </summary>
        [Input("nameSuffix")]
        public string? NameSuffix { get; set; }

        public GetTwingateConnectorsArgs()
        {
        }
        public static new GetTwingateConnectorsArgs Empty => new GetTwingateConnectorsArgs();
    }

    public sealed class GetTwingateConnectorsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Name of the Connector.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Match when the value exist in the name of the connector.
        /// </summary>
        [Input("nameContains")]
        public Input<string>? NameContains { get; set; }

        /// <summary>
        /// Match when the exact value does not exist in the name of the connector.
        /// </summary>
        [Input("nameExclude")]
        public Input<string>? NameExclude { get; set; }

        /// <summary>
        /// The name of the connector must start with the value.
        /// </summary>
        [Input("namePrefix")]
        public Input<string>? NamePrefix { get; set; }

        /// <summary>
        /// The regular expression match of the name of the connector.
        /// </summary>
        [Input("nameRegexp")]
        public Input<string>? NameRegexp { get; set; }

        /// <summary>
        /// The name of the connector must end with the value.
        /// </summary>
        [Input("nameSuffix")]
        public Input<string>? NameSuffix { get; set; }

        public GetTwingateConnectorsInvokeArgs()
        {
        }
        public static new GetTwingateConnectorsInvokeArgs Empty => new GetTwingateConnectorsInvokeArgs();
    }


    [OutputType]
    public sealed class GetTwingateConnectorsResult
    {
        /// <summary>
        /// List of Connectors
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTwingateConnectorsConnectorResult> Connectors;
        /// <summary>
        /// The ID of this resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Returns only connectors that exactly match this name. If no options are passed it will return all connectors. Only one option can be used at a time.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Match when the value exist in the name of the connector.
        /// </summary>
        public readonly string? NameContains;
        /// <summary>
        /// Match when the exact value does not exist in the name of the connector.
        /// </summary>
        public readonly string? NameExclude;
        /// <summary>
        /// The name of the connector must start with the value.
        /// </summary>
        public readonly string? NamePrefix;
        /// <summary>
        /// The regular expression match of the name of the connector.
        /// </summary>
        public readonly string? NameRegexp;
        /// <summary>
        /// The name of the connector must end with the value.
        /// </summary>
        public readonly string? NameSuffix;

        [OutputConstructor]
        private GetTwingateConnectorsResult(
            ImmutableArray<Outputs.GetTwingateConnectorsConnectorResult> connectors,

            string id,

            string? name,

            string? nameContains,

            string? nameExclude,

            string? namePrefix,

            string? nameRegexp,

            string? nameSuffix)
        {
            Connectors = connectors;
            Id = id;
            Name = name;
            NameContains = nameContains;
            NameExclude = nameExclude;
            NamePrefix = namePrefix;
            NameRegexp = nameRegexp;
            NameSuffix = nameSuffix;
        }
    }
}
