// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Twingate.Twingate
{
    public static class GetTwingateResource
    {
        /// <summary>
        /// Resources in Twingate represent any network destination address that you wish to provide private access to for users authorized via the Twingate Client application. Resources can be defined by either IP or DNS address, and all private DNS addresses will be automatically resolved with no client configuration changes. For more information, see the Twingate [documentation](https://docs.twingate.com/docs/resources-and-access-nodes).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Twingate = Pulumi.Twingate;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Twingate.GetTwingateResource.Invoke(new()
        ///     {
        ///         Id = "&lt;your resource's id&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetTwingateResourceResult> InvokeAsync(GetTwingateResourceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTwingateResourceResult>("twingate:index/getTwingateResource:getTwingateResource", args ?? new GetTwingateResourceArgs(), options.WithDefaults());

        /// <summary>
        /// Resources in Twingate represent any network destination address that you wish to provide private access to for users authorized via the Twingate Client application. Resources can be defined by either IP or DNS address, and all private DNS addresses will be automatically resolved with no client configuration changes. For more information, see the Twingate [documentation](https://docs.twingate.com/docs/resources-and-access-nodes).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Twingate = Pulumi.Twingate;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Twingate.GetTwingateResource.Invoke(new()
        ///     {
        ///         Id = "&lt;your resource's id&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTwingateResourceResult> Invoke(GetTwingateResourceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTwingateResourceResult>("twingate:index/getTwingateResource:getTwingateResource", args ?? new GetTwingateResourceInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Resources in Twingate represent any network destination address that you wish to provide private access to for users authorized via the Twingate Client application. Resources can be defined by either IP or DNS address, and all private DNS addresses will be automatically resolved with no client configuration changes. For more information, see the Twingate [documentation](https://docs.twingate.com/docs/resources-and-access-nodes).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Twingate = Pulumi.Twingate;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Twingate.GetTwingateResource.Invoke(new()
        ///     {
        ///         Id = "&lt;your resource's id&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTwingateResourceResult> Invoke(GetTwingateResourceInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetTwingateResourceResult>("twingate:index/getTwingateResource:getTwingateResource", args ?? new GetTwingateResourceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTwingateResourceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the Resource. The ID for the Resource can be obtained from the Admin API or the URL string in the Admin Console.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        /// <summary>
        /// By default (when this argument is not defined) no restriction is applied, and all protocols and ports are allowed.
        /// </summary>
        [Input("protocols")]
        public Inputs.GetTwingateResourceProtocolsArgs? Protocols { get; set; }

        public GetTwingateResourceArgs()
        {
        }
        public static new GetTwingateResourceArgs Empty => new GetTwingateResourceArgs();
    }

    public sealed class GetTwingateResourceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the Resource. The ID for the Resource can be obtained from the Admin API or the URL string in the Admin Console.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        /// <summary>
        /// By default (when this argument is not defined) no restriction is applied, and all protocols and ports are allowed.
        /// </summary>
        [Input("protocols")]
        public Input<Inputs.GetTwingateResourceProtocolsInputArgs>? Protocols { get; set; }

        public GetTwingateResourceInvokeArgs()
        {
        }
        public static new GetTwingateResourceInvokeArgs Empty => new GetTwingateResourceInvokeArgs();
    }


    [OutputType]
    public sealed class GetTwingateResourceResult
    {
        /// <summary>
        /// The Resource's address, which may be an IP address, CIDR range, or DNS address
        /// </summary>
        public readonly string Address;
        /// <summary>
        /// The Approval Mode of the Resource. The valid values are `AUTOMATIC` and `MANUAL`.
        /// </summary>
        public readonly string ApprovalMode;
        /// <summary>
        /// The ID of the Resource. The ID for the Resource can be obtained from the Admin API or the URL string in the Admin Console.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the Resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// By default (when this argument is not defined) no restriction is applied, and all protocols and ports are allowed.
        /// </summary>
        public readonly Outputs.GetTwingateResourceProtocolsResult? Protocols;
        /// <summary>
        /// The Remote Network ID that the Resource is associated with. Resources may only be associated with a single Remote Network.
        /// </summary>
        public readonly string RemoteNetworkId;
        /// <summary>
        /// The `tags` attribute consists of a key-value pairs that correspond with tags to be set on the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// The number of days that the Resource will be locked after the last successful login.
        /// </summary>
        public readonly int UsageBasedAutolockDurationDays;

        [OutputConstructor]
        private GetTwingateResourceResult(
            string address,

            string approvalMode,

            string id,

            string name,

            Outputs.GetTwingateResourceProtocolsResult? protocols,

            string remoteNetworkId,

            ImmutableDictionary<string, string> tags,

            int usageBasedAutolockDurationDays)
        {
            Address = address;
            ApprovalMode = approvalMode;
            Id = id;
            Name = name;
            Protocols = protocols;
            RemoteNetworkId = remoteNetworkId;
            Tags = tags;
            UsageBasedAutolockDurationDays = usageBasedAutolockDurationDays;
        }
    }
}
