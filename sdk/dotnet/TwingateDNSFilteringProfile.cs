// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Twingate.Twingate
{
    /// <summary>
    /// DNS filtering gives you the ability to control what websites your users can access. DNS filtering is only available on certain plans. For more information, see Twingate's [documentation](https://www.twingate.com/docs/dns-filtering). DNS filtering must be enabled for this resources to work. If DNS filtering isn't enabled, the provider will throw an error.
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import twingate:index/twingateDNSFilteringProfile:TwingateDNSFilteringProfile example RG5zRmlsdGVyaW5nUHJvZmlsZToxY2I4YzM0YTc0
    /// ```
    /// </summary>
    [TwingateResourceType("twingate:index/twingateDNSFilteringProfile:TwingateDNSFilteringProfile")]
    public partial class TwingateDNSFilteringProfile : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A block with the following attributes.
        /// </summary>
        [Output("allowedDomains")]
        public Output<Outputs.TwingateDNSFilteringProfileAllowedDomains?> AllowedDomains { get; private set; } = null!;

        /// <summary>
        /// A block with the following attributes.
        /// </summary>
        [Output("contentCategories")]
        public Output<Outputs.TwingateDNSFilteringProfileContentCategories?> ContentCategories { get; private set; } = null!;

        /// <summary>
        /// A block with the following attributes.
        /// </summary>
        [Output("deniedDomains")]
        public Output<Outputs.TwingateDNSFilteringProfileDeniedDomains?> DeniedDomains { get; private set; } = null!;

        /// <summary>
        /// The DNS filtering profile's fallback method. One of "AUTO" or "STRICT". Defaults to "STRICT".
        /// </summary>
        [Output("fallbackMethod")]
        public Output<string> FallbackMethod { get; private set; } = null!;

        /// <summary>
        /// A set of group IDs that have this as their DNS filtering profile. Defaults to an empty set.
        /// </summary>
        [Output("groups")]
        public Output<ImmutableArray<string>> Groups { get; private set; } = null!;

        /// <summary>
        /// The DNS filtering profile's name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A floating point number representing the profile's priority.
        /// </summary>
        [Output("priority")]
        public Output<double> Priority { get; private set; } = null!;

        /// <summary>
        /// A block with the following attributes.
        /// </summary>
        [Output("privacyCategories")]
        public Output<Outputs.TwingateDNSFilteringProfilePrivacyCategories?> PrivacyCategories { get; private set; } = null!;

        /// <summary>
        /// A block with the following attributes.
        /// </summary>
        [Output("securityCategories")]
        public Output<Outputs.TwingateDNSFilteringProfileSecurityCategories?> SecurityCategories { get; private set; } = null!;


        /// <summary>
        /// Create a TwingateDNSFilteringProfile resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TwingateDNSFilteringProfile(string name, TwingateDNSFilteringProfileArgs args, CustomResourceOptions? options = null)
            : base("twingate:index/twingateDNSFilteringProfile:TwingateDNSFilteringProfile", name, args ?? new TwingateDNSFilteringProfileArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TwingateDNSFilteringProfile(string name, Input<string> id, TwingateDNSFilteringProfileState? state = null, CustomResourceOptions? options = null)
            : base("twingate:index/twingateDNSFilteringProfile:TwingateDNSFilteringProfile", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/Twingate/pulumi-twingate",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TwingateDNSFilteringProfile resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TwingateDNSFilteringProfile Get(string name, Input<string> id, TwingateDNSFilteringProfileState? state = null, CustomResourceOptions? options = null)
        {
            return new TwingateDNSFilteringProfile(name, id, state, options);
        }
    }

    public sealed class TwingateDNSFilteringProfileArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A block with the following attributes.
        /// </summary>
        [Input("allowedDomains")]
        public Input<Inputs.TwingateDNSFilteringProfileAllowedDomainsArgs>? AllowedDomains { get; set; }

        /// <summary>
        /// A block with the following attributes.
        /// </summary>
        [Input("contentCategories")]
        public Input<Inputs.TwingateDNSFilteringProfileContentCategoriesArgs>? ContentCategories { get; set; }

        /// <summary>
        /// A block with the following attributes.
        /// </summary>
        [Input("deniedDomains")]
        public Input<Inputs.TwingateDNSFilteringProfileDeniedDomainsArgs>? DeniedDomains { get; set; }

        /// <summary>
        /// The DNS filtering profile's fallback method. One of "AUTO" or "STRICT". Defaults to "STRICT".
        /// </summary>
        [Input("fallbackMethod")]
        public Input<string>? FallbackMethod { get; set; }

        [Input("groups")]
        private InputList<string>? _groups;

        /// <summary>
        /// A set of group IDs that have this as their DNS filtering profile. Defaults to an empty set.
        /// </summary>
        public InputList<string> Groups
        {
            get => _groups ?? (_groups = new InputList<string>());
            set => _groups = value;
        }

        /// <summary>
        /// The DNS filtering profile's name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A floating point number representing the profile's priority.
        /// </summary>
        [Input("priority", required: true)]
        public Input<double> Priority { get; set; } = null!;

        /// <summary>
        /// A block with the following attributes.
        /// </summary>
        [Input("privacyCategories")]
        public Input<Inputs.TwingateDNSFilteringProfilePrivacyCategoriesArgs>? PrivacyCategories { get; set; }

        /// <summary>
        /// A block with the following attributes.
        /// </summary>
        [Input("securityCategories")]
        public Input<Inputs.TwingateDNSFilteringProfileSecurityCategoriesArgs>? SecurityCategories { get; set; }

        public TwingateDNSFilteringProfileArgs()
        {
        }
        public static new TwingateDNSFilteringProfileArgs Empty => new TwingateDNSFilteringProfileArgs();
    }

    public sealed class TwingateDNSFilteringProfileState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A block with the following attributes.
        /// </summary>
        [Input("allowedDomains")]
        public Input<Inputs.TwingateDNSFilteringProfileAllowedDomainsGetArgs>? AllowedDomains { get; set; }

        /// <summary>
        /// A block with the following attributes.
        /// </summary>
        [Input("contentCategories")]
        public Input<Inputs.TwingateDNSFilteringProfileContentCategoriesGetArgs>? ContentCategories { get; set; }

        /// <summary>
        /// A block with the following attributes.
        /// </summary>
        [Input("deniedDomains")]
        public Input<Inputs.TwingateDNSFilteringProfileDeniedDomainsGetArgs>? DeniedDomains { get; set; }

        /// <summary>
        /// The DNS filtering profile's fallback method. One of "AUTO" or "STRICT". Defaults to "STRICT".
        /// </summary>
        [Input("fallbackMethod")]
        public Input<string>? FallbackMethod { get; set; }

        [Input("groups")]
        private InputList<string>? _groups;

        /// <summary>
        /// A set of group IDs that have this as their DNS filtering profile. Defaults to an empty set.
        /// </summary>
        public InputList<string> Groups
        {
            get => _groups ?? (_groups = new InputList<string>());
            set => _groups = value;
        }

        /// <summary>
        /// The DNS filtering profile's name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A floating point number representing the profile's priority.
        /// </summary>
        [Input("priority")]
        public Input<double>? Priority { get; set; }

        /// <summary>
        /// A block with the following attributes.
        /// </summary>
        [Input("privacyCategories")]
        public Input<Inputs.TwingateDNSFilteringProfilePrivacyCategoriesGetArgs>? PrivacyCategories { get; set; }

        /// <summary>
        /// A block with the following attributes.
        /// </summary>
        [Input("securityCategories")]
        public Input<Inputs.TwingateDNSFilteringProfileSecurityCategoriesGetArgs>? SecurityCategories { get; set; }

        public TwingateDNSFilteringProfileState()
        {
        }
        public static new TwingateDNSFilteringProfileState Empty => new TwingateDNSFilteringProfileState();
    }
}
