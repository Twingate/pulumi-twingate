// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Twingate
{
    public static class GetTwingateServiceAccounts
    {
        /// <summary>
        /// Service Accounts offer a way to provide programmatic, centrally-controlled, and consistent access controls.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Twingate = Pulumi.Twingate;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Twingate.GetTwingateServiceAccounts.Invoke(new()
        ///     {
        ///         Name = "&lt;your service account's name&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetTwingateServiceAccountsResult> InvokeAsync(GetTwingateServiceAccountsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTwingateServiceAccountsResult>("twingate:index/getTwingateServiceAccounts:getTwingateServiceAccounts", args ?? new GetTwingateServiceAccountsArgs(), options.WithDefaults());

        /// <summary>
        /// Service Accounts offer a way to provide programmatic, centrally-controlled, and consistent access controls.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Twingate = Pulumi.Twingate;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Twingate.GetTwingateServiceAccounts.Invoke(new()
        ///     {
        ///         Name = "&lt;your service account's name&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetTwingateServiceAccountsResult> Invoke(GetTwingateServiceAccountsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTwingateServiceAccountsResult>("twingate:index/getTwingateServiceAccounts:getTwingateServiceAccounts", args ?? new GetTwingateServiceAccountsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTwingateServiceAccountsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the Service Account
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Match when the value exist in the name of the service account.
        /// </summary>
        [Input("nameContains")]
        public string? NameContains { get; set; }

        /// <summary>
        /// Match when the exact value does not exist in the name of the service account.
        /// </summary>
        [Input("nameExclude")]
        public string? NameExclude { get; set; }

        /// <summary>
        /// The name of the service account must start with the value.
        /// </summary>
        [Input("namePrefix")]
        public string? NamePrefix { get; set; }

        /// <summary>
        /// The regular expression match of the name of the service account.
        /// </summary>
        [Input("nameRegexp")]
        public string? NameRegexp { get; set; }

        /// <summary>
        /// The name of the service account must end with the value.
        /// </summary>
        [Input("nameSuffix")]
        public string? NameSuffix { get; set; }

        public GetTwingateServiceAccountsArgs()
        {
        }
        public static new GetTwingateServiceAccountsArgs Empty => new GetTwingateServiceAccountsArgs();
    }

    public sealed class GetTwingateServiceAccountsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the Service Account
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Match when the value exist in the name of the service account.
        /// </summary>
        [Input("nameContains")]
        public Input<string>? NameContains { get; set; }

        /// <summary>
        /// Match when the exact value does not exist in the name of the service account.
        /// </summary>
        [Input("nameExclude")]
        public Input<string>? NameExclude { get; set; }

        /// <summary>
        /// The name of the service account must start with the value.
        /// </summary>
        [Input("namePrefix")]
        public Input<string>? NamePrefix { get; set; }

        /// <summary>
        /// The regular expression match of the name of the service account.
        /// </summary>
        [Input("nameRegexp")]
        public Input<string>? NameRegexp { get; set; }

        /// <summary>
        /// The name of the service account must end with the value.
        /// </summary>
        [Input("nameSuffix")]
        public Input<string>? NameSuffix { get; set; }

        public GetTwingateServiceAccountsInvokeArgs()
        {
        }
        public static new GetTwingateServiceAccountsInvokeArgs Empty => new GetTwingateServiceAccountsInvokeArgs();
    }


    [OutputType]
    public sealed class GetTwingateServiceAccountsResult
    {
        /// <summary>
        /// The ID of this resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Returns only service accounts that exactly match this name. If no options are passed it will return all service accounts. Only one option can be used at a time.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Match when the value exist in the name of the service account.
        /// </summary>
        public readonly string? NameContains;
        /// <summary>
        /// Match when the exact value does not exist in the name of the service account.
        /// </summary>
        public readonly string? NameExclude;
        /// <summary>
        /// The name of the service account must start with the value.
        /// </summary>
        public readonly string? NamePrefix;
        /// <summary>
        /// The regular expression match of the name of the service account.
        /// </summary>
        public readonly string? NameRegexp;
        /// <summary>
        /// The name of the service account must end with the value.
        /// </summary>
        public readonly string? NameSuffix;
        /// <summary>
        /// List of Service Accounts
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTwingateServiceAccountsServiceAccountResult> ServiceAccounts;

        [OutputConstructor]
        private GetTwingateServiceAccountsResult(
            string id,

            string? name,

            string? nameContains,

            string? nameExclude,

            string? namePrefix,

            string? nameRegexp,

            string? nameSuffix,

            ImmutableArray<Outputs.GetTwingateServiceAccountsServiceAccountResult> serviceAccounts)
        {
            Id = id;
            Name = name;
            NameContains = nameContains;
            NameExclude = nameExclude;
            NamePrefix = namePrefix;
            NameRegexp = nameRegexp;
            NameSuffix = nameSuffix;
            ServiceAccounts = serviceAccounts;
        }
    }
}
