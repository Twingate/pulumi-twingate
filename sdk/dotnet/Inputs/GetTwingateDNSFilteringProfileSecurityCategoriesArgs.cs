// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Twingate.Twingate.Inputs
{

    public sealed class GetTwingateDNSFilteringProfileSecurityCategoriesInputArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to block cryptojacking sites.
        /// </summary>
        [Input("blockCryptojacking", required: true)]
        public Input<bool> BlockCryptojacking { get; set; } = null!;

        /// <summary>
        /// Blocks public DNS entries from returning private IP addresses.
        /// </summary>
        [Input("blockDnsRebinding", required: true)]
        public Input<bool> BlockDnsRebinding { get; set; } = null!;

        /// <summary>
        /// Blocks DGA domains.
        /// </summary>
        [Input("blockDomainGenerationAlgorithms", required: true)]
        public Input<bool> BlockDomainGenerationAlgorithms { get; set; } = null!;

        /// <summary>
        /// Whether to block homoglyph attacks.
        /// </summary>
        [Input("blockIdnHomoglyph", required: true)]
        public Input<bool> BlockIdnHomoglyph { get; set; } = null!;

        /// <summary>
        /// Blocks newly registered domains.
        /// </summary>
        [Input("blockNewlyRegisteredDomains", required: true)]
        public Input<bool> BlockNewlyRegisteredDomains { get; set; } = null!;

        /// <summary>
        /// Block parked domains.
        /// </summary>
        [Input("blockParkedDomains", required: true)]
        public Input<bool> BlockParkedDomains { get; set; } = null!;

        /// <summary>
        /// Blocks typosquatted domains.
        /// </summary>
        [Input("blockTyposquatting", required: true)]
        public Input<bool> BlockTyposquatting { get; set; } = null!;

        /// <summary>
        /// Whether to use Google Safe browsing lists to block content.
        /// </summary>
        [Input("enableGoogleSafeBrowsing", required: true)]
        public Input<bool> EnableGoogleSafeBrowsing { get; set; } = null!;

        /// <summary>
        /// Whether to filter content using threat intelligence feeds.
        /// </summary>
        [Input("enableThreatIntelligenceFeeds", required: true)]
        public Input<bool> EnableThreatIntelligenceFeeds { get; set; } = null!;

        public GetTwingateDNSFilteringProfileSecurityCategoriesInputArgs()
        {
        }
        public static new GetTwingateDNSFilteringProfileSecurityCategoriesInputArgs Empty => new GetTwingateDNSFilteringProfileSecurityCategoriesInputArgs();
    }
}
