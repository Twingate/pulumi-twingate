// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Twingate.Twingate
{
    public static class GetTwingateDNSFilteringProfile
    {
        /// <summary>
        /// DNS filtering gives you the ability to control what websites your users can access. DNS filtering is only available on certain plans. For more information, see Twingate's [documentation](https://www.twingate.com/docs/dns-filtering). DNS filtering must be enabled for this data source to work. If DNS filtering isn't enabled, the provider will throw an error.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Twingate = Pulumi.Twingate;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Twingate.GetTwingateDNSFilteringProfile.Invoke(new()
        ///     {
        ///         Id = "&lt;your dns profile's id&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetTwingateDNSFilteringProfileResult> InvokeAsync(GetTwingateDNSFilteringProfileArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTwingateDNSFilteringProfileResult>("twingate:index/getTwingateDNSFilteringProfile:getTwingateDNSFilteringProfile", args ?? new GetTwingateDNSFilteringProfileArgs(), options.WithDefaults());

        /// <summary>
        /// DNS filtering gives you the ability to control what websites your users can access. DNS filtering is only available on certain plans. For more information, see Twingate's [documentation](https://www.twingate.com/docs/dns-filtering). DNS filtering must be enabled for this data source to work. If DNS filtering isn't enabled, the provider will throw an error.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Twingate = Pulumi.Twingate;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Twingate.GetTwingateDNSFilteringProfile.Invoke(new()
        ///     {
        ///         Id = "&lt;your dns profile's id&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTwingateDNSFilteringProfileResult> Invoke(GetTwingateDNSFilteringProfileInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTwingateDNSFilteringProfileResult>("twingate:index/getTwingateDNSFilteringProfile:getTwingateDNSFilteringProfile", args ?? new GetTwingateDNSFilteringProfileInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTwingateDNSFilteringProfileArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A block with the following attributes.
        /// </summary>
        [Input("allowedDomains")]
        public Inputs.GetTwingateDNSFilteringProfileAllowedDomainsArgs? AllowedDomains { get; set; }

        /// <summary>
        /// A block with the following attributes.
        /// </summary>
        [Input("contentCategories")]
        public Inputs.GetTwingateDNSFilteringProfileContentCategoriesArgs? ContentCategories { get; set; }

        /// <summary>
        /// A block with the following attributes.
        /// </summary>
        [Input("deniedDomains")]
        public Inputs.GetTwingateDNSFilteringProfileDeniedDomainsArgs? DeniedDomains { get; set; }

        /// <summary>
        /// The DNS filtering profile's ID.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        /// <summary>
        /// A block with the following attributes.
        /// </summary>
        [Input("privacyCategories")]
        public Inputs.GetTwingateDNSFilteringProfilePrivacyCategoriesArgs? PrivacyCategories { get; set; }

        /// <summary>
        /// A block with the following attributes.
        /// </summary>
        [Input("securityCategories")]
        public Inputs.GetTwingateDNSFilteringProfileSecurityCategoriesArgs? SecurityCategories { get; set; }

        public GetTwingateDNSFilteringProfileArgs()
        {
        }
        public static new GetTwingateDNSFilteringProfileArgs Empty => new GetTwingateDNSFilteringProfileArgs();
    }

    public sealed class GetTwingateDNSFilteringProfileInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A block with the following attributes.
        /// </summary>
        [Input("allowedDomains")]
        public Input<Inputs.GetTwingateDNSFilteringProfileAllowedDomainsInputArgs>? AllowedDomains { get; set; }

        /// <summary>
        /// A block with the following attributes.
        /// </summary>
        [Input("contentCategories")]
        public Input<Inputs.GetTwingateDNSFilteringProfileContentCategoriesInputArgs>? ContentCategories { get; set; }

        /// <summary>
        /// A block with the following attributes.
        /// </summary>
        [Input("deniedDomains")]
        public Input<Inputs.GetTwingateDNSFilteringProfileDeniedDomainsInputArgs>? DeniedDomains { get; set; }

        /// <summary>
        /// The DNS filtering profile's ID.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        /// <summary>
        /// A block with the following attributes.
        /// </summary>
        [Input("privacyCategories")]
        public Input<Inputs.GetTwingateDNSFilteringProfilePrivacyCategoriesInputArgs>? PrivacyCategories { get; set; }

        /// <summary>
        /// A block with the following attributes.
        /// </summary>
        [Input("securityCategories")]
        public Input<Inputs.GetTwingateDNSFilteringProfileSecurityCategoriesInputArgs>? SecurityCategories { get; set; }

        public GetTwingateDNSFilteringProfileInvokeArgs()
        {
        }
        public static new GetTwingateDNSFilteringProfileInvokeArgs Empty => new GetTwingateDNSFilteringProfileInvokeArgs();
    }


    [OutputType]
    public sealed class GetTwingateDNSFilteringProfileResult
    {
        /// <summary>
        /// A block with the following attributes.
        /// </summary>
        public readonly Outputs.GetTwingateDNSFilteringProfileAllowedDomainsResult? AllowedDomains;
        /// <summary>
        /// A block with the following attributes.
        /// </summary>
        public readonly Outputs.GetTwingateDNSFilteringProfileContentCategoriesResult? ContentCategories;
        /// <summary>
        /// A block with the following attributes.
        /// </summary>
        public readonly Outputs.GetTwingateDNSFilteringProfileDeniedDomainsResult? DeniedDomains;
        /// <summary>
        /// The DNS filtering profile's fallback method. One of AUTOMATIC or STRICT.
        /// </summary>
        public readonly string FallbackMethod;
        /// <summary>
        /// A set of group IDs that have this as their DNS filtering profile. Defaults to an empty set.
        /// </summary>
        public readonly ImmutableArray<string> Groups;
        /// <summary>
        /// The DNS filtering profile's ID.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The DNS filtering profile's name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// A floating point number representing the profile's priority.
        /// </summary>
        public readonly double Priority;
        /// <summary>
        /// A block with the following attributes.
        /// </summary>
        public readonly Outputs.GetTwingateDNSFilteringProfilePrivacyCategoriesResult? PrivacyCategories;
        /// <summary>
        /// A block with the following attributes.
        /// </summary>
        public readonly Outputs.GetTwingateDNSFilteringProfileSecurityCategoriesResult? SecurityCategories;

        [OutputConstructor]
        private GetTwingateDNSFilteringProfileResult(
            Outputs.GetTwingateDNSFilteringProfileAllowedDomainsResult? allowedDomains,

            Outputs.GetTwingateDNSFilteringProfileContentCategoriesResult? contentCategories,

            Outputs.GetTwingateDNSFilteringProfileDeniedDomainsResult? deniedDomains,

            string fallbackMethod,

            ImmutableArray<string> groups,

            string id,

            string name,

            double priority,

            Outputs.GetTwingateDNSFilteringProfilePrivacyCategoriesResult? privacyCategories,

            Outputs.GetTwingateDNSFilteringProfileSecurityCategoriesResult? securityCategories)
        {
            AllowedDomains = allowedDomains;
            ContentCategories = contentCategories;
            DeniedDomains = deniedDomains;
            FallbackMethod = fallbackMethod;
            Groups = groups;
            Id = id;
            Name = name;
            Priority = priority;
            PrivacyCategories = privacyCategories;
            SecurityCategories = securityCategories;
        }
    }
}
