// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Twingate
{
    public static class GetTwingateResources
    {
        /// <summary>
        /// Resources in Twingate represent servers on the private network that clients can connect to. Resources can be defined by IP, CIDR range, FQDN, or DNS zone. For more information, see the Twingate [documentation](https://docs.twingate.com/docs/resources-and-access-nodes).
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Twingate = Pulumi.Twingate;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Twingate.GetTwingateResources.Invoke(new()
        ///     {
        ///         Name = "&lt;your resource's name&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetTwingateResourcesResult> InvokeAsync(GetTwingateResourcesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTwingateResourcesResult>("twingate:index/getTwingateResources:getTwingateResources", args ?? new GetTwingateResourcesArgs(), options.WithDefaults());

        /// <summary>
        /// Resources in Twingate represent servers on the private network that clients can connect to. Resources can be defined by IP, CIDR range, FQDN, or DNS zone. For more information, see the Twingate [documentation](https://docs.twingate.com/docs/resources-and-access-nodes).
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Twingate = Pulumi.Twingate;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Twingate.GetTwingateResources.Invoke(new()
        ///     {
        ///         Name = "&lt;your resource's name&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetTwingateResourcesResult> Invoke(GetTwingateResourcesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTwingateResourcesResult>("twingate:index/getTwingateResources:getTwingateResources", args ?? new GetTwingateResourcesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTwingateResourcesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Resource
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Match when the value exist in the name of the resource.
        /// </summary>
        [Input("nameContains")]
        public string? NameContains { get; set; }

        /// <summary>
        /// Match when the exact value does not exist in the name of the resource.
        /// </summary>
        [Input("nameExclude")]
        public string? NameExclude { get; set; }

        /// <summary>
        /// The name of the resource must start with the value.
        /// </summary>
        [Input("namePrefix")]
        public string? NamePrefix { get; set; }

        /// <summary>
        /// The regular expression match of the name of the resource.
        /// </summary>
        [Input("nameRegexp")]
        public string? NameRegexp { get; set; }

        /// <summary>
        /// The name of the resource must end with the value.
        /// </summary>
        [Input("nameSuffix")]
        public string? NameSuffix { get; set; }

        public GetTwingateResourcesArgs()
        {
        }
        public static new GetTwingateResourcesArgs Empty => new GetTwingateResourcesArgs();
    }

    public sealed class GetTwingateResourcesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Resource
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Match when the value exist in the name of the resource.
        /// </summary>
        [Input("nameContains")]
        public Input<string>? NameContains { get; set; }

        /// <summary>
        /// Match when the exact value does not exist in the name of the resource.
        /// </summary>
        [Input("nameExclude")]
        public Input<string>? NameExclude { get; set; }

        /// <summary>
        /// The name of the resource must start with the value.
        /// </summary>
        [Input("namePrefix")]
        public Input<string>? NamePrefix { get; set; }

        /// <summary>
        /// The regular expression match of the name of the resource.
        /// </summary>
        [Input("nameRegexp")]
        public Input<string>? NameRegexp { get; set; }

        /// <summary>
        /// The name of the resource must end with the value.
        /// </summary>
        [Input("nameSuffix")]
        public Input<string>? NameSuffix { get; set; }

        public GetTwingateResourcesInvokeArgs()
        {
        }
        public static new GetTwingateResourcesInvokeArgs Empty => new GetTwingateResourcesInvokeArgs();
    }


    [OutputType]
    public sealed class GetTwingateResourcesResult
    {
        /// <summary>
        /// The ID of this resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Returns only resources that exactly match this name. If no options are passed it will return all resources. Only one option can be used at a time.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Match when the value exist in the name of the resource.
        /// </summary>
        public readonly string? NameContains;
        /// <summary>
        /// Match when the exact value does not exist in the name of the resource.
        /// </summary>
        public readonly string? NameExclude;
        /// <summary>
        /// The name of the resource must start with the value.
        /// </summary>
        public readonly string? NamePrefix;
        /// <summary>
        /// The regular expression match of the name of the resource.
        /// </summary>
        public readonly string? NameRegexp;
        /// <summary>
        /// The name of the resource must end with the value.
        /// </summary>
        public readonly string? NameSuffix;
        /// <summary>
        /// List of Resources
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTwingateResourcesResourceResult> Resources;

        [OutputConstructor]
        private GetTwingateResourcesResult(
            string id,

            string? name,

            string? nameContains,

            string? nameExclude,

            string? namePrefix,

            string? nameRegexp,

            string? nameSuffix,

            ImmutableArray<Outputs.GetTwingateResourcesResourceResult> resources)
        {
            Id = id;
            Name = name;
            NameContains = nameContains;
            NameExclude = nameExclude;
            NamePrefix = namePrefix;
            NameRegexp = nameRegexp;
            NameSuffix = nameSuffix;
            Resources = resources;
        }
    }
}
