// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Twingate.Twingate
{
    public static class GetTwingateConnector
    {
        /// <summary>
        /// Connectors provide connectivity to Remote Networks. For more information, see Twingate's [documentation](https://docs.twingate.com/docs/understanding-access-nodes).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Twingate = Pulumi.Twingate;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Twingate.GetTwingateConnector.Invoke(new()
        ///     {
        ///         Id = "&lt;your connector's id&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetTwingateConnectorResult> InvokeAsync(GetTwingateConnectorArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTwingateConnectorResult>("twingate:index/getTwingateConnector:getTwingateConnector", args ?? new GetTwingateConnectorArgs(), options.WithDefaults());

        /// <summary>
        /// Connectors provide connectivity to Remote Networks. For more information, see Twingate's [documentation](https://docs.twingate.com/docs/understanding-access-nodes).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Twingate = Pulumi.Twingate;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Twingate.GetTwingateConnector.Invoke(new()
        ///     {
        ///         Id = "&lt;your connector's id&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTwingateConnectorResult> Invoke(GetTwingateConnectorInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTwingateConnectorResult>("twingate:index/getTwingateConnector:getTwingateConnector", args ?? new GetTwingateConnectorInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Connectors provide connectivity to Remote Networks. For more information, see Twingate's [documentation](https://docs.twingate.com/docs/understanding-access-nodes).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Twingate = Pulumi.Twingate;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Twingate.GetTwingateConnector.Invoke(new()
        ///     {
        ///         Id = "&lt;your connector's id&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTwingateConnectorResult> Invoke(GetTwingateConnectorInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetTwingateConnectorResult>("twingate:index/getTwingateConnector:getTwingateConnector", args ?? new GetTwingateConnectorInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTwingateConnectorArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the Connector. The ID for the Connector can be obtained from the Admin API or the URL string in the Admin Console.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetTwingateConnectorArgs()
        {
        }
        public static new GetTwingateConnectorArgs Empty => new GetTwingateConnectorArgs();
    }

    public sealed class GetTwingateConnectorInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the Connector. The ID for the Connector can be obtained from the Admin API or the URL string in the Admin Console.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetTwingateConnectorInvokeArgs()
        {
        }
        public static new GetTwingateConnectorInvokeArgs Empty => new GetTwingateConnectorInvokeArgs();
    }


    [OutputType]
    public sealed class GetTwingateConnectorResult
    {
        /// <summary>
        /// The hostname of the machine hosting the Connector.
        /// </summary>
        public readonly string Hostname;
        /// <summary>
        /// The ID of the Connector. The ID for the Connector can be obtained from the Admin API or the URL string in the Admin Console.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the Connector.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The Connector's private IP addresses.
        /// </summary>
        public readonly ImmutableArray<string> PrivateIps;
        /// <summary>
        /// The Connector's public IP address.
        /// </summary>
        public readonly string PublicIp;
        /// <summary>
        /// The ID of the Remote Network the Connector is attached to.
        /// </summary>
        public readonly string RemoteNetworkId;
        /// <summary>
        /// The Connector's state. One of `ALIVE`, `DEAD_NO_HEARTBEAT`, `DEAD_HEARTBEAT_TOO_OLD` or `DEAD_NO_RELAYS`.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Determines whether status notifications are enabled for the Connector.
        /// </summary>
        public readonly bool StatusUpdatesEnabled;
        /// <summary>
        /// The Connector's version.
        /// </summary>
        public readonly string Version;

        [OutputConstructor]
        private GetTwingateConnectorResult(
            string hostname,

            string id,

            string name,

            ImmutableArray<string> privateIps,

            string publicIp,

            string remoteNetworkId,

            string state,

            bool statusUpdatesEnabled,

            string version)
        {
            Hostname = hostname;
            Id = id;
            Name = name;
            PrivateIps = privateIps;
            PublicIp = publicIp;
            RemoteNetworkId = remoteNetworkId;
            State = state;
            StatusUpdatesEnabled = statusUpdatesEnabled;
            Version = version;
        }
    }
}
