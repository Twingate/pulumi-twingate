// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package twingate

import (
	"context"
	"reflect"

	"github.com/Twingate/pulumi-twingate/sdk/v3/go/twingate/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Users in Twingate can be given access to Twingate Resources and may either be added manually or automatically synchronized with a 3rd party identity provider. For more information, see Twingate's [documentation](https://docs.twingate.com/docs/users).
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/Twingate/pulumi-twingate/sdk/v3/go/twingate"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := twingate.LookupTwingateUser(ctx, &twingate.LookupTwingateUserArgs{
//				Id: "<your user's id>",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func LookupTwingateUser(ctx *pulumi.Context, args *LookupTwingateUserArgs, opts ...pulumi.InvokeOption) (*LookupTwingateUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTwingateUserResult
	err := ctx.Invoke("twingate:index/getTwingateUser:getTwingateUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTwingateUser.
type LookupTwingateUserArgs struct {
	// The ID of the User. The ID for the User can be obtained from the Admin API or the URL string in the Admin Console.
	Id string `pulumi:"id"`
}

// A collection of values returned by getTwingateUser.
type LookupTwingateUserResult struct {
	// The email address of the User
	Email string `pulumi:"email"`
	// The first name of the User
	FirstName string `pulumi:"firstName"`
	// The ID of the User. The ID for the User can be obtained from the Admin API or the URL string in the Admin Console.
	Id string `pulumi:"id"`
	// The last name of the User
	LastName string `pulumi:"lastName"`
	// Indicates the User's role. Either ADMIN, DEVOPS, SUPPORT, or MEMBER
	Role string `pulumi:"role"`
	// Indicates the User's type. Either MANUAL or SYNCED.
	Type string `pulumi:"type"`
}

func LookupTwingateUserOutput(ctx *pulumi.Context, args LookupTwingateUserOutputArgs, opts ...pulumi.InvokeOption) LookupTwingateUserResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupTwingateUserResult, error) {
			args := v.(LookupTwingateUserArgs)
			r, err := LookupTwingateUser(ctx, &args, opts...)
			var s LookupTwingateUserResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupTwingateUserResultOutput)
}

// A collection of arguments for invoking getTwingateUser.
type LookupTwingateUserOutputArgs struct {
	// The ID of the User. The ID for the User can be obtained from the Admin API or the URL string in the Admin Console.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupTwingateUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTwingateUserArgs)(nil)).Elem()
}

// A collection of values returned by getTwingateUser.
type LookupTwingateUserResultOutput struct{ *pulumi.OutputState }

func (LookupTwingateUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTwingateUserResult)(nil)).Elem()
}

func (o LookupTwingateUserResultOutput) ToLookupTwingateUserResultOutput() LookupTwingateUserResultOutput {
	return o
}

func (o LookupTwingateUserResultOutput) ToLookupTwingateUserResultOutputWithContext(ctx context.Context) LookupTwingateUserResultOutput {
	return o
}

// The email address of the User
func (o LookupTwingateUserResultOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTwingateUserResult) string { return v.Email }).(pulumi.StringOutput)
}

// The first name of the User
func (o LookupTwingateUserResultOutput) FirstName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTwingateUserResult) string { return v.FirstName }).(pulumi.StringOutput)
}

// The ID of the User. The ID for the User can be obtained from the Admin API or the URL string in the Admin Console.
func (o LookupTwingateUserResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTwingateUserResult) string { return v.Id }).(pulumi.StringOutput)
}

// The last name of the User
func (o LookupTwingateUserResultOutput) LastName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTwingateUserResult) string { return v.LastName }).(pulumi.StringOutput)
}

// Indicates the User's role. Either ADMIN, DEVOPS, SUPPORT, or MEMBER
func (o LookupTwingateUserResultOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTwingateUserResult) string { return v.Role }).(pulumi.StringOutput)
}

// Indicates the User's type. Either MANUAL or SYNCED.
func (o LookupTwingateUserResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTwingateUserResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTwingateUserResultOutput{})
}
