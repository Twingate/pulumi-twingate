// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package twingate

import (
	"context"
	"reflect"

	"github.com/Twingate/pulumi-twingate/sdk/v3/go/twingate/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Groups are how users are authorized to access Resources. For more information, see Twingate's [documentation](https://docs.twingate.com/docs/groups).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/Twingate/pulumi-twingate/sdk/v3/go/twingate"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := twingate.GetTwingateGroups(ctx, &twingate.GetTwingateGroupsArgs{
//				Name: pulumi.StringRef("<your group's name>"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetTwingateGroups(ctx *pulumi.Context, args *GetTwingateGroupsArgs, opts ...pulumi.InvokeOption) (*GetTwingateGroupsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetTwingateGroupsResult
	err := ctx.Invoke("twingate:index/getTwingateGroups:getTwingateGroups", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTwingateGroups.
type GetTwingateGroupsArgs struct {
	// Returns only Groups matching the specified state.
	IsActive *bool `pulumi:"isActive"`
	// Returns only groups that exactly match this name. If no options are passed it will return all resources. Only one option can be used at a time.
	Name *string `pulumi:"name"`
	// Match when the value exist in the name of the group.
	NameContains *string `pulumi:"nameContains"`
	// Match when the exact value does not exist in the name of the group.
	NameExclude *string `pulumi:"nameExclude"`
	// The name of the group must start with the value.
	NamePrefix *string `pulumi:"namePrefix"`
	// The regular expression match of the name of the group.
	NameRegexp *string `pulumi:"nameRegexp"`
	// The name of the group must end with the value.
	NameSuffix *string `pulumi:"nameSuffix"`
	// Returns groups that match a list of types. valid types: `MANUAL`, `SYNCED`, `SYSTEM`.
	Types []string `pulumi:"types"`
}

// A collection of values returned by getTwingateGroups.
type GetTwingateGroupsResult struct {
	// List of Groups
	Groups []GetTwingateGroupsGroup `pulumi:"groups"`
	// The ID of this resource.
	Id string `pulumi:"id"`
	// Returns only Groups matching the specified state.
	IsActive *bool `pulumi:"isActive"`
	// Returns only groups that exactly match this name. If no options are passed it will return all resources. Only one option can be used at a time.
	Name *string `pulumi:"name"`
	// Match when the value exist in the name of the group.
	NameContains *string `pulumi:"nameContains"`
	// Match when the exact value does not exist in the name of the group.
	NameExclude *string `pulumi:"nameExclude"`
	// The name of the group must start with the value.
	NamePrefix *string `pulumi:"namePrefix"`
	// The regular expression match of the name of the group.
	NameRegexp *string `pulumi:"nameRegexp"`
	// The name of the group must end with the value.
	NameSuffix *string `pulumi:"nameSuffix"`
	// Returns groups that match a list of types. valid types: `MANUAL`, `SYNCED`, `SYSTEM`.
	Types []string `pulumi:"types"`
}

func GetTwingateGroupsOutput(ctx *pulumi.Context, args GetTwingateGroupsOutputArgs, opts ...pulumi.InvokeOption) GetTwingateGroupsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetTwingateGroupsResultOutput, error) {
			args := v.(GetTwingateGroupsArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetTwingateGroupsResult
			secret, err := ctx.InvokePackageRaw("twingate:index/getTwingateGroups:getTwingateGroups", args, &rv, "", opts...)
			if err != nil {
				return GetTwingateGroupsResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetTwingateGroupsResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetTwingateGroupsResultOutput), nil
			}
			return output, nil
		}).(GetTwingateGroupsResultOutput)
}

// A collection of arguments for invoking getTwingateGroups.
type GetTwingateGroupsOutputArgs struct {
	// Returns only Groups matching the specified state.
	IsActive pulumi.BoolPtrInput `pulumi:"isActive"`
	// Returns only groups that exactly match this name. If no options are passed it will return all resources. Only one option can be used at a time.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Match when the value exist in the name of the group.
	NameContains pulumi.StringPtrInput `pulumi:"nameContains"`
	// Match when the exact value does not exist in the name of the group.
	NameExclude pulumi.StringPtrInput `pulumi:"nameExclude"`
	// The name of the group must start with the value.
	NamePrefix pulumi.StringPtrInput `pulumi:"namePrefix"`
	// The regular expression match of the name of the group.
	NameRegexp pulumi.StringPtrInput `pulumi:"nameRegexp"`
	// The name of the group must end with the value.
	NameSuffix pulumi.StringPtrInput `pulumi:"nameSuffix"`
	// Returns groups that match a list of types. valid types: `MANUAL`, `SYNCED`, `SYSTEM`.
	Types pulumi.StringArrayInput `pulumi:"types"`
}

func (GetTwingateGroupsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTwingateGroupsArgs)(nil)).Elem()
}

// A collection of values returned by getTwingateGroups.
type GetTwingateGroupsResultOutput struct{ *pulumi.OutputState }

func (GetTwingateGroupsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTwingateGroupsResult)(nil)).Elem()
}

func (o GetTwingateGroupsResultOutput) ToGetTwingateGroupsResultOutput() GetTwingateGroupsResultOutput {
	return o
}

func (o GetTwingateGroupsResultOutput) ToGetTwingateGroupsResultOutputWithContext(ctx context.Context) GetTwingateGroupsResultOutput {
	return o
}

// List of Groups
func (o GetTwingateGroupsResultOutput) Groups() GetTwingateGroupsGroupArrayOutput {
	return o.ApplyT(func(v GetTwingateGroupsResult) []GetTwingateGroupsGroup { return v.Groups }).(GetTwingateGroupsGroupArrayOutput)
}

// The ID of this resource.
func (o GetTwingateGroupsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetTwingateGroupsResult) string { return v.Id }).(pulumi.StringOutput)
}

// Returns only Groups matching the specified state.
func (o GetTwingateGroupsResultOutput) IsActive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetTwingateGroupsResult) *bool { return v.IsActive }).(pulumi.BoolPtrOutput)
}

// Returns only groups that exactly match this name. If no options are passed it will return all resources. Only one option can be used at a time.
func (o GetTwingateGroupsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTwingateGroupsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Match when the value exist in the name of the group.
func (o GetTwingateGroupsResultOutput) NameContains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTwingateGroupsResult) *string { return v.NameContains }).(pulumi.StringPtrOutput)
}

// Match when the exact value does not exist in the name of the group.
func (o GetTwingateGroupsResultOutput) NameExclude() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTwingateGroupsResult) *string { return v.NameExclude }).(pulumi.StringPtrOutput)
}

// The name of the group must start with the value.
func (o GetTwingateGroupsResultOutput) NamePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTwingateGroupsResult) *string { return v.NamePrefix }).(pulumi.StringPtrOutput)
}

// The regular expression match of the name of the group.
func (o GetTwingateGroupsResultOutput) NameRegexp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTwingateGroupsResult) *string { return v.NameRegexp }).(pulumi.StringPtrOutput)
}

// The name of the group must end with the value.
func (o GetTwingateGroupsResultOutput) NameSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTwingateGroupsResult) *string { return v.NameSuffix }).(pulumi.StringPtrOutput)
}

// Returns groups that match a list of types. valid types: `MANUAL`, `SYNCED`, `SYSTEM`.
func (o GetTwingateGroupsResultOutput) Types() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTwingateGroupsResult) []string { return v.Types }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetTwingateGroupsResultOutput{})
}
