// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package twingate

import (
	"context"
	"reflect"

	"github.com/Twingate/pulumi-twingate/sdk/v3/go/twingate/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Connectors provide connectivity to Remote Networks. For more information, see Twingate's [documentation](https://docs.twingate.com/docs/understanding-access-nodes).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/Twingate/pulumi-twingate/sdk/v3/go/twingate"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := twingate.LookupTwingateConnector(ctx, &twingate.LookupTwingateConnectorArgs{
//				Id: "<your connector's id>",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupTwingateConnector(ctx *pulumi.Context, args *LookupTwingateConnectorArgs, opts ...pulumi.InvokeOption) (*LookupTwingateConnectorResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTwingateConnectorResult
	err := ctx.Invoke("twingate:index/getTwingateConnector:getTwingateConnector", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTwingateConnector.
type LookupTwingateConnectorArgs struct {
	// The ID of the Connector. The ID for the Connector can be obtained from the Admin API or the URL string in the Admin Console.
	Id string `pulumi:"id"`
}

// A collection of values returned by getTwingateConnector.
type LookupTwingateConnectorResult struct {
	// The hostname of the machine hosting the Connector.
	Hostname string `pulumi:"hostname"`
	// The ID of the Connector. The ID for the Connector can be obtained from the Admin API or the URL string in the Admin Console.
	Id string `pulumi:"id"`
	// The name of the Connector.
	Name string `pulumi:"name"`
	// The Connector's private IP addresses.
	PrivateIps []string `pulumi:"privateIps"`
	// The Connector's public IP address.
	PublicIp string `pulumi:"publicIp"`
	// The ID of the Remote Network the Connector is attached to.
	RemoteNetworkId string `pulumi:"remoteNetworkId"`
	// The Connector's state. One of `ALIVE`, `DEAD_NO_HEARTBEAT`, `DEAD_HEARTBEAT_TOO_OLD` or `DEAD_NO_RELAYS`.
	State string `pulumi:"state"`
	// Determines whether status notifications are enabled for the Connector.
	StatusUpdatesEnabled bool `pulumi:"statusUpdatesEnabled"`
	// The Connector's version.
	Version string `pulumi:"version"`
}

func LookupTwingateConnectorOutput(ctx *pulumi.Context, args LookupTwingateConnectorOutputArgs, opts ...pulumi.InvokeOption) LookupTwingateConnectorResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupTwingateConnectorResultOutput, error) {
			args := v.(LookupTwingateConnectorArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupTwingateConnectorResult
			secret, err := ctx.InvokePackageRaw("twingate:index/getTwingateConnector:getTwingateConnector", args, &rv, "", opts...)
			if err != nil {
				return LookupTwingateConnectorResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupTwingateConnectorResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupTwingateConnectorResultOutput), nil
			}
			return output, nil
		}).(LookupTwingateConnectorResultOutput)
}

// A collection of arguments for invoking getTwingateConnector.
type LookupTwingateConnectorOutputArgs struct {
	// The ID of the Connector. The ID for the Connector can be obtained from the Admin API or the URL string in the Admin Console.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupTwingateConnectorOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTwingateConnectorArgs)(nil)).Elem()
}

// A collection of values returned by getTwingateConnector.
type LookupTwingateConnectorResultOutput struct{ *pulumi.OutputState }

func (LookupTwingateConnectorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTwingateConnectorResult)(nil)).Elem()
}

func (o LookupTwingateConnectorResultOutput) ToLookupTwingateConnectorResultOutput() LookupTwingateConnectorResultOutput {
	return o
}

func (o LookupTwingateConnectorResultOutput) ToLookupTwingateConnectorResultOutputWithContext(ctx context.Context) LookupTwingateConnectorResultOutput {
	return o
}

// The hostname of the machine hosting the Connector.
func (o LookupTwingateConnectorResultOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTwingateConnectorResult) string { return v.Hostname }).(pulumi.StringOutput)
}

// The ID of the Connector. The ID for the Connector can be obtained from the Admin API or the URL string in the Admin Console.
func (o LookupTwingateConnectorResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTwingateConnectorResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the Connector.
func (o LookupTwingateConnectorResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTwingateConnectorResult) string { return v.Name }).(pulumi.StringOutput)
}

// The Connector's private IP addresses.
func (o LookupTwingateConnectorResultOutput) PrivateIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupTwingateConnectorResult) []string { return v.PrivateIps }).(pulumi.StringArrayOutput)
}

// The Connector's public IP address.
func (o LookupTwingateConnectorResultOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTwingateConnectorResult) string { return v.PublicIp }).(pulumi.StringOutput)
}

// The ID of the Remote Network the Connector is attached to.
func (o LookupTwingateConnectorResultOutput) RemoteNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTwingateConnectorResult) string { return v.RemoteNetworkId }).(pulumi.StringOutput)
}

// The Connector's state. One of `ALIVE`, `DEAD_NO_HEARTBEAT`, `DEAD_HEARTBEAT_TOO_OLD` or `DEAD_NO_RELAYS`.
func (o LookupTwingateConnectorResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTwingateConnectorResult) string { return v.State }).(pulumi.StringOutput)
}

// Determines whether status notifications are enabled for the Connector.
func (o LookupTwingateConnectorResultOutput) StatusUpdatesEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTwingateConnectorResult) bool { return v.StatusUpdatesEnabled }).(pulumi.BoolOutput)
}

// The Connector's version.
func (o LookupTwingateConnectorResultOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTwingateConnectorResult) string { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTwingateConnectorResultOutput{})
}
