// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Connectors provide connectivity to Remote Networks. This resource type will create the Connector in the Twingate Admin Console, but in order to successfully deploy it, you must also generate Connector tokens that authenticate the Connector with Twingate. For more information, see Twingate's [documentation](https://docs.twingate.com/docs/understanding-access-nodes).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as twingate from "@twingate/pulumi-twingate";
 *
 * const awsNetwork = new twingate.TwingateRemoteNetwork("awsNetwork", {});
 * const awsConnector = new twingate.TwingateConnector("awsConnector", {
 *     remoteNetworkId: awsNetwork.id,
 *     statusUpdatesEnabled: true,
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import twingate:index/twingateConnector:TwingateConnector aws_connector Q29ubmVjdG9yOjI2NzM=
 * ```
 */
export class TwingateConnector extends pulumi.CustomResource {
    /**
     * Get an existing TwingateConnector resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TwingateConnectorState, opts?: pulumi.CustomResourceOptions): TwingateConnector {
        return new TwingateConnector(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'twingate:index/twingateConnector:TwingateConnector';

    /**
     * Returns true if the given object is an instance of TwingateConnector.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TwingateConnector {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TwingateConnector.__pulumiType;
    }

    /**
     * The hostname of the machine hosting the Connector.
     */
    public /*out*/ readonly hostname!: pulumi.Output<string>;
    /**
     * Name of the Connector, if not provided one will be generated.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The Connector's private IP addresses.
     */
    public /*out*/ readonly privateIps!: pulumi.Output<string[]>;
    /**
     * The Connector's public IP address.
     */
    public /*out*/ readonly publicIp!: pulumi.Output<string>;
    /**
     * The ID of the Remote Network the Connector is attached to.
     */
    public readonly remoteNetworkId!: pulumi.Output<string>;
    /**
     * The Connector's state. One of `ALIVE`, `DEAD_NO_HEARTBEAT`, `DEAD_HEARTBEAT_TOO_OLD` or `DEAD_NO_RELAYS`.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Determines whether status notifications are enabled for the Connector. Default is `true`.
     */
    public readonly statusUpdatesEnabled!: pulumi.Output<boolean>;
    /**
     * The Connector's version.
     */
    public /*out*/ readonly version!: pulumi.Output<string>;

    /**
     * Create a TwingateConnector resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TwingateConnectorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TwingateConnectorArgs | TwingateConnectorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TwingateConnectorState | undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["privateIps"] = state ? state.privateIps : undefined;
            resourceInputs["publicIp"] = state ? state.publicIp : undefined;
            resourceInputs["remoteNetworkId"] = state ? state.remoteNetworkId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["statusUpdatesEnabled"] = state ? state.statusUpdatesEnabled : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as TwingateConnectorArgs | undefined;
            if ((!args || args.remoteNetworkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remoteNetworkId'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["remoteNetworkId"] = args ? args.remoteNetworkId : undefined;
            resourceInputs["statusUpdatesEnabled"] = args ? args.statusUpdatesEnabled : undefined;
            resourceInputs["hostname"] = undefined /*out*/;
            resourceInputs["privateIps"] = undefined /*out*/;
            resourceInputs["publicIp"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TwingateConnector.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TwingateConnector resources.
 */
export interface TwingateConnectorState {
    /**
     * The hostname of the machine hosting the Connector.
     */
    hostname?: pulumi.Input<string>;
    /**
     * Name of the Connector, if not provided one will be generated.
     */
    name?: pulumi.Input<string>;
    /**
     * The Connector's private IP addresses.
     */
    privateIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Connector's public IP address.
     */
    publicIp?: pulumi.Input<string>;
    /**
     * The ID of the Remote Network the Connector is attached to.
     */
    remoteNetworkId?: pulumi.Input<string>;
    /**
     * The Connector's state. One of `ALIVE`, `DEAD_NO_HEARTBEAT`, `DEAD_HEARTBEAT_TOO_OLD` or `DEAD_NO_RELAYS`.
     */
    state?: pulumi.Input<string>;
    /**
     * Determines whether status notifications are enabled for the Connector. Default is `true`.
     */
    statusUpdatesEnabled?: pulumi.Input<boolean>;
    /**
     * The Connector's version.
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TwingateConnector resource.
 */
export interface TwingateConnectorArgs {
    /**
     * Name of the Connector, if not provided one will be generated.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the Remote Network the Connector is attached to.
     */
    remoteNetworkId: pulumi.Input<string>;
    /**
     * Determines whether status notifications are enabled for the Connector. Default is `true`.
     */
    statusUpdatesEnabled?: pulumi.Input<boolean>;
}
