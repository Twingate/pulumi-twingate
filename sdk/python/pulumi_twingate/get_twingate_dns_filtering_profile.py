# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetTwingateDNSFilteringProfileResult',
    'AwaitableGetTwingateDNSFilteringProfileResult',
    'get_twingate_dns_filtering_profile',
    'get_twingate_dns_filtering_profile_output',
]

@pulumi.output_type
class GetTwingateDNSFilteringProfileResult:
    """
    A collection of values returned by getTwingateDNSFilteringProfile.
    """
    def __init__(__self__, allowed_domains=None, content_categories=None, denied_domains=None, fallback_method=None, groups=None, id=None, name=None, priority=None, privacy_categories=None, security_categories=None):
        if allowed_domains and not isinstance(allowed_domains, dict):
            raise TypeError("Expected argument 'allowed_domains' to be a dict")
        pulumi.set(__self__, "allowed_domains", allowed_domains)
        if content_categories and not isinstance(content_categories, dict):
            raise TypeError("Expected argument 'content_categories' to be a dict")
        pulumi.set(__self__, "content_categories", content_categories)
        if denied_domains and not isinstance(denied_domains, dict):
            raise TypeError("Expected argument 'denied_domains' to be a dict")
        pulumi.set(__self__, "denied_domains", denied_domains)
        if fallback_method and not isinstance(fallback_method, str):
            raise TypeError("Expected argument 'fallback_method' to be a str")
        pulumi.set(__self__, "fallback_method", fallback_method)
        if groups and not isinstance(groups, list):
            raise TypeError("Expected argument 'groups' to be a list")
        pulumi.set(__self__, "groups", groups)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if priority and not isinstance(priority, float):
            raise TypeError("Expected argument 'priority' to be a float")
        pulumi.set(__self__, "priority", priority)
        if privacy_categories and not isinstance(privacy_categories, dict):
            raise TypeError("Expected argument 'privacy_categories' to be a dict")
        pulumi.set(__self__, "privacy_categories", privacy_categories)
        if security_categories and not isinstance(security_categories, dict):
            raise TypeError("Expected argument 'security_categories' to be a dict")
        pulumi.set(__self__, "security_categories", security_categories)

    @property
    @pulumi.getter(name="allowedDomains")
    def allowed_domains(self) -> Optional['outputs.GetTwingateDNSFilteringProfileAllowedDomainsResult']:
        """
        A block with the following attributes.
        """
        return pulumi.get(self, "allowed_domains")

    @property
    @pulumi.getter(name="contentCategories")
    def content_categories(self) -> Optional['outputs.GetTwingateDNSFilteringProfileContentCategoriesResult']:
        """
        A block with the following attributes.
        """
        return pulumi.get(self, "content_categories")

    @property
    @pulumi.getter(name="deniedDomains")
    def denied_domains(self) -> Optional['outputs.GetTwingateDNSFilteringProfileDeniedDomainsResult']:
        """
        A block with the following attributes.
        """
        return pulumi.get(self, "denied_domains")

    @property
    @pulumi.getter(name="fallbackMethod")
    def fallback_method(self) -> str:
        """
        The DNS filtering profile's fallback method. One of AUTOMATIC or STRICT.
        """
        return pulumi.get(self, "fallback_method")

    @property
    @pulumi.getter
    def groups(self) -> Sequence[str]:
        """
        A set of group IDs that have this as their DNS filtering profile. Defaults to an empty set.
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The DNS filtering profile's ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The DNS filtering profile's name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def priority(self) -> float:
        """
        A floating point number representing the profile's priority.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="privacyCategories")
    def privacy_categories(self) -> Optional['outputs.GetTwingateDNSFilteringProfilePrivacyCategoriesResult']:
        """
        A block with the following attributes.
        """
        return pulumi.get(self, "privacy_categories")

    @property
    @pulumi.getter(name="securityCategories")
    def security_categories(self) -> Optional['outputs.GetTwingateDNSFilteringProfileSecurityCategoriesResult']:
        """
        A block with the following attributes.
        """
        return pulumi.get(self, "security_categories")


class AwaitableGetTwingateDNSFilteringProfileResult(GetTwingateDNSFilteringProfileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTwingateDNSFilteringProfileResult(
            allowed_domains=self.allowed_domains,
            content_categories=self.content_categories,
            denied_domains=self.denied_domains,
            fallback_method=self.fallback_method,
            groups=self.groups,
            id=self.id,
            name=self.name,
            priority=self.priority,
            privacy_categories=self.privacy_categories,
            security_categories=self.security_categories)


def get_twingate_dns_filtering_profile(allowed_domains: Optional[Union['GetTwingateDNSFilteringProfileAllowedDomainsArgs', 'GetTwingateDNSFilteringProfileAllowedDomainsArgsDict']] = None,
                                       content_categories: Optional[Union['GetTwingateDNSFilteringProfileContentCategoriesArgs', 'GetTwingateDNSFilteringProfileContentCategoriesArgsDict']] = None,
                                       denied_domains: Optional[Union['GetTwingateDNSFilteringProfileDeniedDomainsArgs', 'GetTwingateDNSFilteringProfileDeniedDomainsArgsDict']] = None,
                                       id: Optional[str] = None,
                                       privacy_categories: Optional[Union['GetTwingateDNSFilteringProfilePrivacyCategoriesArgs', 'GetTwingateDNSFilteringProfilePrivacyCategoriesArgsDict']] = None,
                                       security_categories: Optional[Union['GetTwingateDNSFilteringProfileSecurityCategoriesArgs', 'GetTwingateDNSFilteringProfileSecurityCategoriesArgsDict']] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTwingateDNSFilteringProfileResult:
    """
    DNS filtering gives you the ability to control what websites your users can access. DNS filtering is only available on certain plans. For more information, see Twingate's [documentation](https://www.twingate.com/docs/dns-filtering). DNS filtering must be enabled for this data source to work. If DNS filtering isn't enabled, the provider will throw an error.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_twingate as twingate

    example = twingate.get_twingate_dns_filtering_profile(id="<your dns profile's id>")
    ```


    :param Union['GetTwingateDNSFilteringProfileAllowedDomainsArgs', 'GetTwingateDNSFilteringProfileAllowedDomainsArgsDict'] allowed_domains: A block with the following attributes.
    :param Union['GetTwingateDNSFilteringProfileContentCategoriesArgs', 'GetTwingateDNSFilteringProfileContentCategoriesArgsDict'] content_categories: A block with the following attributes.
    :param Union['GetTwingateDNSFilteringProfileDeniedDomainsArgs', 'GetTwingateDNSFilteringProfileDeniedDomainsArgsDict'] denied_domains: A block with the following attributes.
    :param str id: The DNS filtering profile's ID.
    :param Union['GetTwingateDNSFilteringProfilePrivacyCategoriesArgs', 'GetTwingateDNSFilteringProfilePrivacyCategoriesArgsDict'] privacy_categories: A block with the following attributes.
    :param Union['GetTwingateDNSFilteringProfileSecurityCategoriesArgs', 'GetTwingateDNSFilteringProfileSecurityCategoriesArgsDict'] security_categories: A block with the following attributes.
    """
    __args__ = dict()
    __args__['allowedDomains'] = allowed_domains
    __args__['contentCategories'] = content_categories
    __args__['deniedDomains'] = denied_domains
    __args__['id'] = id
    __args__['privacyCategories'] = privacy_categories
    __args__['securityCategories'] = security_categories
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('twingate:index/getTwingateDNSFilteringProfile:getTwingateDNSFilteringProfile', __args__, opts=opts, typ=GetTwingateDNSFilteringProfileResult).value

    return AwaitableGetTwingateDNSFilteringProfileResult(
        allowed_domains=pulumi.get(__ret__, 'allowed_domains'),
        content_categories=pulumi.get(__ret__, 'content_categories'),
        denied_domains=pulumi.get(__ret__, 'denied_domains'),
        fallback_method=pulumi.get(__ret__, 'fallback_method'),
        groups=pulumi.get(__ret__, 'groups'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        priority=pulumi.get(__ret__, 'priority'),
        privacy_categories=pulumi.get(__ret__, 'privacy_categories'),
        security_categories=pulumi.get(__ret__, 'security_categories'))
def get_twingate_dns_filtering_profile_output(allowed_domains: Optional[pulumi.Input[Optional[Union['GetTwingateDNSFilteringProfileAllowedDomainsArgs', 'GetTwingateDNSFilteringProfileAllowedDomainsArgsDict']]]] = None,
                                              content_categories: Optional[pulumi.Input[Optional[Union['GetTwingateDNSFilteringProfileContentCategoriesArgs', 'GetTwingateDNSFilteringProfileContentCategoriesArgsDict']]]] = None,
                                              denied_domains: Optional[pulumi.Input[Optional[Union['GetTwingateDNSFilteringProfileDeniedDomainsArgs', 'GetTwingateDNSFilteringProfileDeniedDomainsArgsDict']]]] = None,
                                              id: Optional[pulumi.Input[str]] = None,
                                              privacy_categories: Optional[pulumi.Input[Optional[Union['GetTwingateDNSFilteringProfilePrivacyCategoriesArgs', 'GetTwingateDNSFilteringProfilePrivacyCategoriesArgsDict']]]] = None,
                                              security_categories: Optional[pulumi.Input[Optional[Union['GetTwingateDNSFilteringProfileSecurityCategoriesArgs', 'GetTwingateDNSFilteringProfileSecurityCategoriesArgsDict']]]] = None,
                                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTwingateDNSFilteringProfileResult]:
    """
    DNS filtering gives you the ability to control what websites your users can access. DNS filtering is only available on certain plans. For more information, see Twingate's [documentation](https://www.twingate.com/docs/dns-filtering). DNS filtering must be enabled for this data source to work. If DNS filtering isn't enabled, the provider will throw an error.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_twingate as twingate

    example = twingate.get_twingate_dns_filtering_profile(id="<your dns profile's id>")
    ```


    :param Union['GetTwingateDNSFilteringProfileAllowedDomainsArgs', 'GetTwingateDNSFilteringProfileAllowedDomainsArgsDict'] allowed_domains: A block with the following attributes.
    :param Union['GetTwingateDNSFilteringProfileContentCategoriesArgs', 'GetTwingateDNSFilteringProfileContentCategoriesArgsDict'] content_categories: A block with the following attributes.
    :param Union['GetTwingateDNSFilteringProfileDeniedDomainsArgs', 'GetTwingateDNSFilteringProfileDeniedDomainsArgsDict'] denied_domains: A block with the following attributes.
    :param str id: The DNS filtering profile's ID.
    :param Union['GetTwingateDNSFilteringProfilePrivacyCategoriesArgs', 'GetTwingateDNSFilteringProfilePrivacyCategoriesArgsDict'] privacy_categories: A block with the following attributes.
    :param Union['GetTwingateDNSFilteringProfileSecurityCategoriesArgs', 'GetTwingateDNSFilteringProfileSecurityCategoriesArgsDict'] security_categories: A block with the following attributes.
    """
    __args__ = dict()
    __args__['allowedDomains'] = allowed_domains
    __args__['contentCategories'] = content_categories
    __args__['deniedDomains'] = denied_domains
    __args__['id'] = id
    __args__['privacyCategories'] = privacy_categories
    __args__['securityCategories'] = security_categories
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('twingate:index/getTwingateDNSFilteringProfile:getTwingateDNSFilteringProfile', __args__, opts=opts, typ=GetTwingateDNSFilteringProfileResult)
    return __ret__.apply(lambda __response__: GetTwingateDNSFilteringProfileResult(
        allowed_domains=pulumi.get(__response__, 'allowed_domains'),
        content_categories=pulumi.get(__response__, 'content_categories'),
        denied_domains=pulumi.get(__response__, 'denied_domains'),
        fallback_method=pulumi.get(__response__, 'fallback_method'),
        groups=pulumi.get(__response__, 'groups'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        priority=pulumi.get(__response__, 'priority'),
        privacy_categories=pulumi.get(__response__, 'privacy_categories'),
        security_categories=pulumi.get(__response__, 'security_categories')))
