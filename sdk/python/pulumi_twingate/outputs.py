# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'TwingateDNSFilteringProfileAllowedDomains',
    'TwingateDNSFilteringProfileContentCategories',
    'TwingateDNSFilteringProfileDeniedDomains',
    'TwingateDNSFilteringProfilePrivacyCategories',
    'TwingateDNSFilteringProfileSecurityCategories',
    'TwingateResourceAccessGroup',
    'TwingateResourceAccessService',
    'TwingateResourceProtocols',
    'TwingateResourceProtocolsTcp',
    'TwingateResourceProtocolsUdp',
    'GetTwingateConnectorsConnectorResult',
    'GetTwingateDNSFilteringProfileAllowedDomainsResult',
    'GetTwingateDNSFilteringProfileContentCategoriesResult',
    'GetTwingateDNSFilteringProfileDeniedDomainsResult',
    'GetTwingateDNSFilteringProfilePrivacyCategoriesResult',
    'GetTwingateDNSFilteringProfileSecurityCategoriesResult',
    'GetTwingateGroupsGroupResult',
    'GetTwingateRemoteNetworksRemoteNetworkResult',
    'GetTwingateResourceProtocolsResult',
    'GetTwingateResourceProtocolsTcpResult',
    'GetTwingateResourceProtocolsUdpResult',
    'GetTwingateResourcesResourceResult',
    'GetTwingateResourcesResourceProtocolsResult',
    'GetTwingateResourcesResourceProtocolsTcpResult',
    'GetTwingateResourcesResourceProtocolsUdpResult',
    'GetTwingateSecurityPoliciesSecurityPolicyResult',
    'GetTwingateServiceAccountsServiceAccountResult',
    'GetTwingateUsersUserResult',
]

@pulumi.output_type
class TwingateDNSFilteringProfileAllowedDomains(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isAuthoritative":
            suggest = "is_authoritative"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TwingateDNSFilteringProfileAllowedDomains. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TwingateDNSFilteringProfileAllowedDomains.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TwingateDNSFilteringProfileAllowedDomains.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domains: Optional[Sequence[builtins.str]] = None,
                 is_authoritative: Optional[builtins.bool] = None):
        """
        :param Sequence[builtins.str] domains: A set of allowed domains. Defaults to an empty set.
        """
        if domains is not None:
            pulumi.set(__self__, "domains", domains)
        if is_authoritative is not None:
            pulumi.set(__self__, "is_authoritative", is_authoritative)

    @property
    @pulumi.getter
    def domains(self) -> Optional[Sequence[builtins.str]]:
        """
        A set of allowed domains. Defaults to an empty set.
        """
        return pulumi.get(self, "domains")

    @property
    @pulumi.getter(name="isAuthoritative")
    def is_authoritative(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "is_authoritative")


@pulumi.output_type
class TwingateDNSFilteringProfileContentCategories(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockAdultContent":
            suggest = "block_adult_content"
        elif key == "blockDating":
            suggest = "block_dating"
        elif key == "blockGambling":
            suggest = "block_gambling"
        elif key == "blockGames":
            suggest = "block_games"
        elif key == "blockPiracy":
            suggest = "block_piracy"
        elif key == "blockSocialMedia":
            suggest = "block_social_media"
        elif key == "blockStreaming":
            suggest = "block_streaming"
        elif key == "enableSafesearch":
            suggest = "enable_safesearch"
        elif key == "enableYoutubeRestrictedMode":
            suggest = "enable_youtube_restricted_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TwingateDNSFilteringProfileContentCategories. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TwingateDNSFilteringProfileContentCategories.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TwingateDNSFilteringProfileContentCategories.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_adult_content: Optional[builtins.bool] = None,
                 block_dating: Optional[builtins.bool] = None,
                 block_gambling: Optional[builtins.bool] = None,
                 block_games: Optional[builtins.bool] = None,
                 block_piracy: Optional[builtins.bool] = None,
                 block_social_media: Optional[builtins.bool] = None,
                 block_streaming: Optional[builtins.bool] = None,
                 enable_safesearch: Optional[builtins.bool] = None,
                 enable_youtube_restricted_mode: Optional[builtins.bool] = None):
        """
        :param builtins.bool block_adult_content: Whether to block adult content. Defaults to false.
        :param builtins.bool block_dating: Whether to block dating content. Defaults to false.
        :param builtins.bool block_gambling: Whether to block gambling content. Defaults to false.
        :param builtins.bool block_games: Whether to block games. Defaults to false.
        :param builtins.bool block_piracy: Whether to block piracy sites. Defaults to false.
        :param builtins.bool block_social_media: Whether to block social media. Defaults to false.
        :param builtins.bool block_streaming: Whether to block streaming content. Defaults to false.
        :param builtins.bool enable_safesearch: Whether to force safe search. Defaults to false.
        :param builtins.bool enable_youtube_restricted_mode: Whether to force YouTube to use restricted mode. Defaults to false.
        """
        if block_adult_content is not None:
            pulumi.set(__self__, "block_adult_content", block_adult_content)
        if block_dating is not None:
            pulumi.set(__self__, "block_dating", block_dating)
        if block_gambling is not None:
            pulumi.set(__self__, "block_gambling", block_gambling)
        if block_games is not None:
            pulumi.set(__self__, "block_games", block_games)
        if block_piracy is not None:
            pulumi.set(__self__, "block_piracy", block_piracy)
        if block_social_media is not None:
            pulumi.set(__self__, "block_social_media", block_social_media)
        if block_streaming is not None:
            pulumi.set(__self__, "block_streaming", block_streaming)
        if enable_safesearch is not None:
            pulumi.set(__self__, "enable_safesearch", enable_safesearch)
        if enable_youtube_restricted_mode is not None:
            pulumi.set(__self__, "enable_youtube_restricted_mode", enable_youtube_restricted_mode)

    @property
    @pulumi.getter(name="blockAdultContent")
    def block_adult_content(self) -> Optional[builtins.bool]:
        """
        Whether to block adult content. Defaults to false.
        """
        return pulumi.get(self, "block_adult_content")

    @property
    @pulumi.getter(name="blockDating")
    def block_dating(self) -> Optional[builtins.bool]:
        """
        Whether to block dating content. Defaults to false.
        """
        return pulumi.get(self, "block_dating")

    @property
    @pulumi.getter(name="blockGambling")
    def block_gambling(self) -> Optional[builtins.bool]:
        """
        Whether to block gambling content. Defaults to false.
        """
        return pulumi.get(self, "block_gambling")

    @property
    @pulumi.getter(name="blockGames")
    def block_games(self) -> Optional[builtins.bool]:
        """
        Whether to block games. Defaults to false.
        """
        return pulumi.get(self, "block_games")

    @property
    @pulumi.getter(name="blockPiracy")
    def block_piracy(self) -> Optional[builtins.bool]:
        """
        Whether to block piracy sites. Defaults to false.
        """
        return pulumi.get(self, "block_piracy")

    @property
    @pulumi.getter(name="blockSocialMedia")
    def block_social_media(self) -> Optional[builtins.bool]:
        """
        Whether to block social media. Defaults to false.
        """
        return pulumi.get(self, "block_social_media")

    @property
    @pulumi.getter(name="blockStreaming")
    def block_streaming(self) -> Optional[builtins.bool]:
        """
        Whether to block streaming content. Defaults to false.
        """
        return pulumi.get(self, "block_streaming")

    @property
    @pulumi.getter(name="enableSafesearch")
    def enable_safesearch(self) -> Optional[builtins.bool]:
        """
        Whether to force safe search. Defaults to false.
        """
        return pulumi.get(self, "enable_safesearch")

    @property
    @pulumi.getter(name="enableYoutubeRestrictedMode")
    def enable_youtube_restricted_mode(self) -> Optional[builtins.bool]:
        """
        Whether to force YouTube to use restricted mode. Defaults to false.
        """
        return pulumi.get(self, "enable_youtube_restricted_mode")


@pulumi.output_type
class TwingateDNSFilteringProfileDeniedDomains(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isAuthoritative":
            suggest = "is_authoritative"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TwingateDNSFilteringProfileDeniedDomains. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TwingateDNSFilteringProfileDeniedDomains.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TwingateDNSFilteringProfileDeniedDomains.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domains: Optional[Sequence[builtins.str]] = None,
                 is_authoritative: Optional[builtins.bool] = None):
        """
        :param Sequence[builtins.str] domains: A set of denied domains. Defaults to an empty set.
        """
        if domains is not None:
            pulumi.set(__self__, "domains", domains)
        if is_authoritative is not None:
            pulumi.set(__self__, "is_authoritative", is_authoritative)

    @property
    @pulumi.getter
    def domains(self) -> Optional[Sequence[builtins.str]]:
        """
        A set of denied domains. Defaults to an empty set.
        """
        return pulumi.get(self, "domains")

    @property
    @pulumi.getter(name="isAuthoritative")
    def is_authoritative(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "is_authoritative")


@pulumi.output_type
class TwingateDNSFilteringProfilePrivacyCategories(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockAdsAndTrackers":
            suggest = "block_ads_and_trackers"
        elif key == "blockAffiliateLinks":
            suggest = "block_affiliate_links"
        elif key == "blockDisguisedTrackers":
            suggest = "block_disguised_trackers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TwingateDNSFilteringProfilePrivacyCategories. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TwingateDNSFilteringProfilePrivacyCategories.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TwingateDNSFilteringProfilePrivacyCategories.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_ads_and_trackers: Optional[builtins.bool] = None,
                 block_affiliate_links: Optional[builtins.bool] = None,
                 block_disguised_trackers: Optional[builtins.bool] = None):
        """
        :param builtins.bool block_ads_and_trackers: Whether to block ads and trackers. Defaults to false.
        :param builtins.bool block_affiliate_links: Whether to block affiliate links. Defaults to false.
        :param builtins.bool block_disguised_trackers: Whether to block disguised third party trackers. Defaults to false.
        """
        if block_ads_and_trackers is not None:
            pulumi.set(__self__, "block_ads_and_trackers", block_ads_and_trackers)
        if block_affiliate_links is not None:
            pulumi.set(__self__, "block_affiliate_links", block_affiliate_links)
        if block_disguised_trackers is not None:
            pulumi.set(__self__, "block_disguised_trackers", block_disguised_trackers)

    @property
    @pulumi.getter(name="blockAdsAndTrackers")
    def block_ads_and_trackers(self) -> Optional[builtins.bool]:
        """
        Whether to block ads and trackers. Defaults to false.
        """
        return pulumi.get(self, "block_ads_and_trackers")

    @property
    @pulumi.getter(name="blockAffiliateLinks")
    def block_affiliate_links(self) -> Optional[builtins.bool]:
        """
        Whether to block affiliate links. Defaults to false.
        """
        return pulumi.get(self, "block_affiliate_links")

    @property
    @pulumi.getter(name="blockDisguisedTrackers")
    def block_disguised_trackers(self) -> Optional[builtins.bool]:
        """
        Whether to block disguised third party trackers. Defaults to false.
        """
        return pulumi.get(self, "block_disguised_trackers")


@pulumi.output_type
class TwingateDNSFilteringProfileSecurityCategories(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockCryptojacking":
            suggest = "block_cryptojacking"
        elif key == "blockDnsRebinding":
            suggest = "block_dns_rebinding"
        elif key == "blockDomainGenerationAlgorithms":
            suggest = "block_domain_generation_algorithms"
        elif key == "blockIdnHomoglyph":
            suggest = "block_idn_homoglyph"
        elif key == "blockNewlyRegisteredDomains":
            suggest = "block_newly_registered_domains"
        elif key == "blockParkedDomains":
            suggest = "block_parked_domains"
        elif key == "blockTyposquatting":
            suggest = "block_typosquatting"
        elif key == "enableGoogleSafeBrowsing":
            suggest = "enable_google_safe_browsing"
        elif key == "enableThreatIntelligenceFeeds":
            suggest = "enable_threat_intelligence_feeds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TwingateDNSFilteringProfileSecurityCategories. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TwingateDNSFilteringProfileSecurityCategories.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TwingateDNSFilteringProfileSecurityCategories.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_cryptojacking: Optional[builtins.bool] = None,
                 block_dns_rebinding: Optional[builtins.bool] = None,
                 block_domain_generation_algorithms: Optional[builtins.bool] = None,
                 block_idn_homoglyph: Optional[builtins.bool] = None,
                 block_newly_registered_domains: Optional[builtins.bool] = None,
                 block_parked_domains: Optional[builtins.bool] = None,
                 block_typosquatting: Optional[builtins.bool] = None,
                 enable_google_safe_browsing: Optional[builtins.bool] = None,
                 enable_threat_intelligence_feeds: Optional[builtins.bool] = None):
        """
        :param builtins.bool block_cryptojacking: Whether to block cryptojacking sites. Defaults to true.
        :param builtins.bool block_dns_rebinding: Blocks public DNS entries from returning private IP addresses. Defaults to true.
        :param builtins.bool block_domain_generation_algorithms: Blocks DGA domains. Defaults to true.
        :param builtins.bool block_idn_homoglyph: Whether to block homoglyph attacks. Defaults to true.
        :param builtins.bool block_newly_registered_domains: Blocks newly registered domains. Defaults to true.
        :param builtins.bool block_parked_domains: Block parked domains. Defaults to true.
        :param builtins.bool block_typosquatting: Blocks typosquatted domains. Defaults to true.
        :param builtins.bool enable_google_safe_browsing: Whether to use Google Safe browsing lists to block content. Defaults to true.
        :param builtins.bool enable_threat_intelligence_feeds: Whether to filter content using threat intelligence feeds. Defaults to true.
        """
        if block_cryptojacking is not None:
            pulumi.set(__self__, "block_cryptojacking", block_cryptojacking)
        if block_dns_rebinding is not None:
            pulumi.set(__self__, "block_dns_rebinding", block_dns_rebinding)
        if block_domain_generation_algorithms is not None:
            pulumi.set(__self__, "block_domain_generation_algorithms", block_domain_generation_algorithms)
        if block_idn_homoglyph is not None:
            pulumi.set(__self__, "block_idn_homoglyph", block_idn_homoglyph)
        if block_newly_registered_domains is not None:
            pulumi.set(__self__, "block_newly_registered_domains", block_newly_registered_domains)
        if block_parked_domains is not None:
            pulumi.set(__self__, "block_parked_domains", block_parked_domains)
        if block_typosquatting is not None:
            pulumi.set(__self__, "block_typosquatting", block_typosquatting)
        if enable_google_safe_browsing is not None:
            pulumi.set(__self__, "enable_google_safe_browsing", enable_google_safe_browsing)
        if enable_threat_intelligence_feeds is not None:
            pulumi.set(__self__, "enable_threat_intelligence_feeds", enable_threat_intelligence_feeds)

    @property
    @pulumi.getter(name="blockCryptojacking")
    def block_cryptojacking(self) -> Optional[builtins.bool]:
        """
        Whether to block cryptojacking sites. Defaults to true.
        """
        return pulumi.get(self, "block_cryptojacking")

    @property
    @pulumi.getter(name="blockDnsRebinding")
    def block_dns_rebinding(self) -> Optional[builtins.bool]:
        """
        Blocks public DNS entries from returning private IP addresses. Defaults to true.
        """
        return pulumi.get(self, "block_dns_rebinding")

    @property
    @pulumi.getter(name="blockDomainGenerationAlgorithms")
    def block_domain_generation_algorithms(self) -> Optional[builtins.bool]:
        """
        Blocks DGA domains. Defaults to true.
        """
        return pulumi.get(self, "block_domain_generation_algorithms")

    @property
    @pulumi.getter(name="blockIdnHomoglyph")
    def block_idn_homoglyph(self) -> Optional[builtins.bool]:
        """
        Whether to block homoglyph attacks. Defaults to true.
        """
        return pulumi.get(self, "block_idn_homoglyph")

    @property
    @pulumi.getter(name="blockNewlyRegisteredDomains")
    def block_newly_registered_domains(self) -> Optional[builtins.bool]:
        """
        Blocks newly registered domains. Defaults to true.
        """
        return pulumi.get(self, "block_newly_registered_domains")

    @property
    @pulumi.getter(name="blockParkedDomains")
    def block_parked_domains(self) -> Optional[builtins.bool]:
        """
        Block parked domains. Defaults to true.
        """
        return pulumi.get(self, "block_parked_domains")

    @property
    @pulumi.getter(name="blockTyposquatting")
    def block_typosquatting(self) -> Optional[builtins.bool]:
        """
        Blocks typosquatted domains. Defaults to true.
        """
        return pulumi.get(self, "block_typosquatting")

    @property
    @pulumi.getter(name="enableGoogleSafeBrowsing")
    def enable_google_safe_browsing(self) -> Optional[builtins.bool]:
        """
        Whether to use Google Safe browsing lists to block content. Defaults to true.
        """
        return pulumi.get(self, "enable_google_safe_browsing")

    @property
    @pulumi.getter(name="enableThreatIntelligenceFeeds")
    def enable_threat_intelligence_feeds(self) -> Optional[builtins.bool]:
        """
        Whether to filter content using threat intelligence feeds. Defaults to true.
        """
        return pulumi.get(self, "enable_threat_intelligence_feeds")


@pulumi.output_type
class TwingateResourceAccessGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "approvalMode":
            suggest = "approval_mode"
        elif key == "groupId":
            suggest = "group_id"
        elif key == "securityPolicyId":
            suggest = "security_policy_id"
        elif key == "usageBasedAutolockDurationDays":
            suggest = "usage_based_autolock_duration_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TwingateResourceAccessGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TwingateResourceAccessGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TwingateResourceAccessGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 approval_mode: Optional[builtins.str] = None,
                 group_id: Optional[builtins.str] = None,
                 security_policy_id: Optional[builtins.str] = None,
                 usage_based_autolock_duration_days: Optional[builtins.int] = None):
        """
        :param builtins.str approval_mode: This will set the approval model on the edge. The valid values are `AUTOMATIC` and `MANUAL`.
        :param builtins.str group_id: Group ID that will have permission to access the Resource.
        :param builtins.str security_policy_id: The ID of a `get_twingate_security_policy` to use as the access policy for the group IDs in the access block.
        :param builtins.int usage_based_autolock_duration_days: The usage-based auto-lock duration configured on the edge (in days).
        """
        if approval_mode is not None:
            pulumi.set(__self__, "approval_mode", approval_mode)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if security_policy_id is not None:
            pulumi.set(__self__, "security_policy_id", security_policy_id)
        if usage_based_autolock_duration_days is not None:
            pulumi.set(__self__, "usage_based_autolock_duration_days", usage_based_autolock_duration_days)

    @property
    @pulumi.getter(name="approvalMode")
    def approval_mode(self) -> Optional[builtins.str]:
        """
        This will set the approval model on the edge. The valid values are `AUTOMATIC` and `MANUAL`.
        """
        return pulumi.get(self, "approval_mode")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[builtins.str]:
        """
        Group ID that will have permission to access the Resource.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="securityPolicyId")
    def security_policy_id(self) -> Optional[builtins.str]:
        """
        The ID of a `get_twingate_security_policy` to use as the access policy for the group IDs in the access block.
        """
        return pulumi.get(self, "security_policy_id")

    @property
    @pulumi.getter(name="usageBasedAutolockDurationDays")
    def usage_based_autolock_duration_days(self) -> Optional[builtins.int]:
        """
        The usage-based auto-lock duration configured on the edge (in days).
        """
        return pulumi.get(self, "usage_based_autolock_duration_days")


@pulumi.output_type
class TwingateResourceAccessService(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceAccountId":
            suggest = "service_account_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TwingateResourceAccessService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TwingateResourceAccessService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TwingateResourceAccessService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 service_account_id: Optional[builtins.str] = None):
        """
        :param builtins.str service_account_id: The ID of the service account that should have access to this Resource.
        """
        if service_account_id is not None:
            pulumi.set(__self__, "service_account_id", service_account_id)

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> Optional[builtins.str]:
        """
        The ID of the service account that should have access to this Resource.
        """
        return pulumi.get(self, "service_account_id")


@pulumi.output_type
class TwingateResourceProtocols(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowIcmp":
            suggest = "allow_icmp"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TwingateResourceProtocols. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TwingateResourceProtocols.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TwingateResourceProtocols.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_icmp: Optional[builtins.bool] = None,
                 tcp: Optional['outputs.TwingateResourceProtocolsTcp'] = None,
                 udp: Optional['outputs.TwingateResourceProtocolsUdp'] = None):
        """
        :param builtins.bool allow_icmp: Whether to allow ICMP (ping) traffic
        """
        if allow_icmp is not None:
            pulumi.set(__self__, "allow_icmp", allow_icmp)
        if tcp is not None:
            pulumi.set(__self__, "tcp", tcp)
        if udp is not None:
            pulumi.set(__self__, "udp", udp)

    @property
    @pulumi.getter(name="allowIcmp")
    def allow_icmp(self) -> Optional[builtins.bool]:
        """
        Whether to allow ICMP (ping) traffic
        """
        return pulumi.get(self, "allow_icmp")

    @property
    @pulumi.getter
    def tcp(self) -> Optional['outputs.TwingateResourceProtocolsTcp']:
        return pulumi.get(self, "tcp")

    @property
    @pulumi.getter
    def udp(self) -> Optional['outputs.TwingateResourceProtocolsUdp']:
        return pulumi.get(self, "udp")


@pulumi.output_type
class TwingateResourceProtocolsTcp(dict):
    def __init__(__self__, *,
                 policy: Optional[builtins.str] = None,
                 ports: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.str policy: Whether to allow or deny all ports, or restrict protocol access within certain port ranges: Can be `RESTRICTED` (only listed ports are allowed), `ALLOW_ALL`, or `DENY_ALL`
        :param Sequence[builtins.str] ports: List of port ranges between 1 and 65535 inclusive, in the format `100-200` for a range, or `8080` for a single port
        """
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)

    @property
    @pulumi.getter
    def policy(self) -> Optional[builtins.str]:
        """
        Whether to allow or deny all ports, or restrict protocol access within certain port ranges: Can be `RESTRICTED` (only listed ports are allowed), `ALLOW_ALL`, or `DENY_ALL`
        """
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence[builtins.str]]:
        """
        List of port ranges between 1 and 65535 inclusive, in the format `100-200` for a range, or `8080` for a single port
        """
        return pulumi.get(self, "ports")


@pulumi.output_type
class TwingateResourceProtocolsUdp(dict):
    def __init__(__self__, *,
                 policy: Optional[builtins.str] = None,
                 ports: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.str policy: Whether to allow or deny all ports, or restrict protocol access within certain port ranges: Can be `RESTRICTED` (only listed ports are allowed), `ALLOW_ALL`, or `DENY_ALL`
        :param Sequence[builtins.str] ports: List of port ranges between 1 and 65535 inclusive, in the format `100-200` for a range, or `8080` for a single port
        """
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)

    @property
    @pulumi.getter
    def policy(self) -> Optional[builtins.str]:
        """
        Whether to allow or deny all ports, or restrict protocol access within certain port ranges: Can be `RESTRICTED` (only listed ports are allowed), `ALLOW_ALL`, or `DENY_ALL`
        """
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def ports(self) -> Optional[Sequence[builtins.str]]:
        """
        List of port ranges between 1 and 65535 inclusive, in the format `100-200` for a range, or `8080` for a single port
        """
        return pulumi.get(self, "ports")


@pulumi.output_type
class GetTwingateConnectorsConnectorResult(dict):
    def __init__(__self__, *,
                 hostname: builtins.str,
                 id: builtins.str,
                 name: builtins.str,
                 private_ips: Sequence[builtins.str],
                 public_ip: builtins.str,
                 remote_network_id: builtins.str,
                 state: builtins.str,
                 status_updates_enabled: builtins.bool,
                 version: builtins.str):
        """
        :param builtins.str hostname: The hostname of the machine hosting the Connector.
        :param builtins.str id: The ID of the Connector.
        :param builtins.str name: The Name of the Connector.
        :param Sequence[builtins.str] private_ips: The Connector's private IP addresses.
        :param builtins.str public_ip: The Connector's public IP address.
        :param builtins.str remote_network_id: The ID of the Remote Network attached to the Connector.
        :param builtins.str state: The Connector's state. One of `ALIVE`, `DEAD_NO_HEARTBEAT`, `DEAD_HEARTBEAT_TOO_OLD` or `DEAD_NO_RELAYS`.
        :param builtins.bool status_updates_enabled: Determines whether status notifications are enabled for the Connector.
        :param builtins.str version: The Connector's version.
        """
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "private_ips", private_ips)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "remote_network_id", remote_network_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "status_updates_enabled", status_updates_enabled)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def hostname(self) -> builtins.str:
        """
        The hostname of the machine hosting the Connector.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the Connector.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The Name of the Connector.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="privateIps")
    def private_ips(self) -> Sequence[builtins.str]:
        """
        The Connector's private IP addresses.
        """
        return pulumi.get(self, "private_ips")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> builtins.str:
        """
        The Connector's public IP address.
        """
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="remoteNetworkId")
    def remote_network_id(self) -> builtins.str:
        """
        The ID of the Remote Network attached to the Connector.
        """
        return pulumi.get(self, "remote_network_id")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        The Connector's state. One of `ALIVE`, `DEAD_NO_HEARTBEAT`, `DEAD_HEARTBEAT_TOO_OLD` or `DEAD_NO_RELAYS`.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="statusUpdatesEnabled")
    def status_updates_enabled(self) -> builtins.bool:
        """
        Determines whether status notifications are enabled for the Connector.
        """
        return pulumi.get(self, "status_updates_enabled")

    @property
    @pulumi.getter
    def version(self) -> builtins.str:
        """
        The Connector's version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetTwingateDNSFilteringProfileAllowedDomainsResult(dict):
    def __init__(__self__, *,
                 domains: Sequence[builtins.str]):
        """
        :param Sequence[builtins.str] domains: A set of allowed domains.
        """
        pulumi.set(__self__, "domains", domains)

    @property
    @pulumi.getter
    def domains(self) -> Sequence[builtins.str]:
        """
        A set of allowed domains.
        """
        return pulumi.get(self, "domains")


@pulumi.output_type
class GetTwingateDNSFilteringProfileContentCategoriesResult(dict):
    def __init__(__self__, *,
                 block_adult_content: builtins.bool,
                 block_dating: builtins.bool,
                 block_gambling: builtins.bool,
                 block_games: builtins.bool,
                 block_piracy: builtins.bool,
                 block_social_media: builtins.bool,
                 block_streaming: builtins.bool,
                 enable_safesearch: builtins.bool,
                 enable_youtube_restricted_mode: builtins.bool):
        """
        :param builtins.bool block_adult_content: Whether to block adult content.
        :param builtins.bool block_dating: Whether to block dating content.
        :param builtins.bool block_gambling: Whether to block gambling content.
        :param builtins.bool block_games: Whether to block games.
        :param builtins.bool block_piracy: Whether to block piracy sites.
        :param builtins.bool block_social_media: Whether to block social media.
        :param builtins.bool block_streaming: Whether to block streaming content.
        :param builtins.bool enable_safesearch: Whether to force safe search.
        :param builtins.bool enable_youtube_restricted_mode: Whether to force YouTube to use restricted mode.
        """
        pulumi.set(__self__, "block_adult_content", block_adult_content)
        pulumi.set(__self__, "block_dating", block_dating)
        pulumi.set(__self__, "block_gambling", block_gambling)
        pulumi.set(__self__, "block_games", block_games)
        pulumi.set(__self__, "block_piracy", block_piracy)
        pulumi.set(__self__, "block_social_media", block_social_media)
        pulumi.set(__self__, "block_streaming", block_streaming)
        pulumi.set(__self__, "enable_safesearch", enable_safesearch)
        pulumi.set(__self__, "enable_youtube_restricted_mode", enable_youtube_restricted_mode)

    @property
    @pulumi.getter(name="blockAdultContent")
    def block_adult_content(self) -> builtins.bool:
        """
        Whether to block adult content.
        """
        return pulumi.get(self, "block_adult_content")

    @property
    @pulumi.getter(name="blockDating")
    def block_dating(self) -> builtins.bool:
        """
        Whether to block dating content.
        """
        return pulumi.get(self, "block_dating")

    @property
    @pulumi.getter(name="blockGambling")
    def block_gambling(self) -> builtins.bool:
        """
        Whether to block gambling content.
        """
        return pulumi.get(self, "block_gambling")

    @property
    @pulumi.getter(name="blockGames")
    def block_games(self) -> builtins.bool:
        """
        Whether to block games.
        """
        return pulumi.get(self, "block_games")

    @property
    @pulumi.getter(name="blockPiracy")
    def block_piracy(self) -> builtins.bool:
        """
        Whether to block piracy sites.
        """
        return pulumi.get(self, "block_piracy")

    @property
    @pulumi.getter(name="blockSocialMedia")
    def block_social_media(self) -> builtins.bool:
        """
        Whether to block social media.
        """
        return pulumi.get(self, "block_social_media")

    @property
    @pulumi.getter(name="blockStreaming")
    def block_streaming(self) -> builtins.bool:
        """
        Whether to block streaming content.
        """
        return pulumi.get(self, "block_streaming")

    @property
    @pulumi.getter(name="enableSafesearch")
    def enable_safesearch(self) -> builtins.bool:
        """
        Whether to force safe search.
        """
        return pulumi.get(self, "enable_safesearch")

    @property
    @pulumi.getter(name="enableYoutubeRestrictedMode")
    def enable_youtube_restricted_mode(self) -> builtins.bool:
        """
        Whether to force YouTube to use restricted mode.
        """
        return pulumi.get(self, "enable_youtube_restricted_mode")


@pulumi.output_type
class GetTwingateDNSFilteringProfileDeniedDomainsResult(dict):
    def __init__(__self__, *,
                 domains: Sequence[builtins.str]):
        """
        :param Sequence[builtins.str] domains: A set of denied domains.
        """
        pulumi.set(__self__, "domains", domains)

    @property
    @pulumi.getter
    def domains(self) -> Sequence[builtins.str]:
        """
        A set of denied domains.
        """
        return pulumi.get(self, "domains")


@pulumi.output_type
class GetTwingateDNSFilteringProfilePrivacyCategoriesResult(dict):
    def __init__(__self__, *,
                 block_ads_and_trackers: builtins.bool,
                 block_affiliate_links: builtins.bool,
                 block_disguised_trackers: builtins.bool):
        """
        :param builtins.bool block_ads_and_trackers: Whether to block ads and trackers.
        :param builtins.bool block_affiliate_links: Whether to block affiliate links.
        :param builtins.bool block_disguised_trackers: Whether to block disguised third party trackers.
        """
        pulumi.set(__self__, "block_ads_and_trackers", block_ads_and_trackers)
        pulumi.set(__self__, "block_affiliate_links", block_affiliate_links)
        pulumi.set(__self__, "block_disguised_trackers", block_disguised_trackers)

    @property
    @pulumi.getter(name="blockAdsAndTrackers")
    def block_ads_and_trackers(self) -> builtins.bool:
        """
        Whether to block ads and trackers.
        """
        return pulumi.get(self, "block_ads_and_trackers")

    @property
    @pulumi.getter(name="blockAffiliateLinks")
    def block_affiliate_links(self) -> builtins.bool:
        """
        Whether to block affiliate links.
        """
        return pulumi.get(self, "block_affiliate_links")

    @property
    @pulumi.getter(name="blockDisguisedTrackers")
    def block_disguised_trackers(self) -> builtins.bool:
        """
        Whether to block disguised third party trackers.
        """
        return pulumi.get(self, "block_disguised_trackers")


@pulumi.output_type
class GetTwingateDNSFilteringProfileSecurityCategoriesResult(dict):
    def __init__(__self__, *,
                 block_cryptojacking: builtins.bool,
                 block_dns_rebinding: builtins.bool,
                 block_domain_generation_algorithms: builtins.bool,
                 block_idn_homoglyph: builtins.bool,
                 block_newly_registered_domains: builtins.bool,
                 block_parked_domains: builtins.bool,
                 block_typosquatting: builtins.bool,
                 enable_google_safe_browsing: builtins.bool,
                 enable_threat_intelligence_feeds: builtins.bool):
        """
        :param builtins.bool block_cryptojacking: Whether to block cryptojacking sites.
        :param builtins.bool block_dns_rebinding: Blocks public DNS entries from returning private IP addresses.
        :param builtins.bool block_domain_generation_algorithms: Blocks DGA domains.
        :param builtins.bool block_idn_homoglyph: Whether to block homoglyph attacks.
        :param builtins.bool block_newly_registered_domains: Blocks newly registered domains.
        :param builtins.bool block_parked_domains: Block parked domains.
        :param builtins.bool block_typosquatting: Blocks typosquatted domains.
        :param builtins.bool enable_google_safe_browsing: Whether to use Google Safe browsing lists to block content.
        :param builtins.bool enable_threat_intelligence_feeds: Whether to filter content using threat intelligence feeds.
        """
        pulumi.set(__self__, "block_cryptojacking", block_cryptojacking)
        pulumi.set(__self__, "block_dns_rebinding", block_dns_rebinding)
        pulumi.set(__self__, "block_domain_generation_algorithms", block_domain_generation_algorithms)
        pulumi.set(__self__, "block_idn_homoglyph", block_idn_homoglyph)
        pulumi.set(__self__, "block_newly_registered_domains", block_newly_registered_domains)
        pulumi.set(__self__, "block_parked_domains", block_parked_domains)
        pulumi.set(__self__, "block_typosquatting", block_typosquatting)
        pulumi.set(__self__, "enable_google_safe_browsing", enable_google_safe_browsing)
        pulumi.set(__self__, "enable_threat_intelligence_feeds", enable_threat_intelligence_feeds)

    @property
    @pulumi.getter(name="blockCryptojacking")
    def block_cryptojacking(self) -> builtins.bool:
        """
        Whether to block cryptojacking sites.
        """
        return pulumi.get(self, "block_cryptojacking")

    @property
    @pulumi.getter(name="blockDnsRebinding")
    def block_dns_rebinding(self) -> builtins.bool:
        """
        Blocks public DNS entries from returning private IP addresses.
        """
        return pulumi.get(self, "block_dns_rebinding")

    @property
    @pulumi.getter(name="blockDomainGenerationAlgorithms")
    def block_domain_generation_algorithms(self) -> builtins.bool:
        """
        Blocks DGA domains.
        """
        return pulumi.get(self, "block_domain_generation_algorithms")

    @property
    @pulumi.getter(name="blockIdnHomoglyph")
    def block_idn_homoglyph(self) -> builtins.bool:
        """
        Whether to block homoglyph attacks.
        """
        return pulumi.get(self, "block_idn_homoglyph")

    @property
    @pulumi.getter(name="blockNewlyRegisteredDomains")
    def block_newly_registered_domains(self) -> builtins.bool:
        """
        Blocks newly registered domains.
        """
        return pulumi.get(self, "block_newly_registered_domains")

    @property
    @pulumi.getter(name="blockParkedDomains")
    def block_parked_domains(self) -> builtins.bool:
        """
        Block parked domains.
        """
        return pulumi.get(self, "block_parked_domains")

    @property
    @pulumi.getter(name="blockTyposquatting")
    def block_typosquatting(self) -> builtins.bool:
        """
        Blocks typosquatted domains.
        """
        return pulumi.get(self, "block_typosquatting")

    @property
    @pulumi.getter(name="enableGoogleSafeBrowsing")
    def enable_google_safe_browsing(self) -> builtins.bool:
        """
        Whether to use Google Safe browsing lists to block content.
        """
        return pulumi.get(self, "enable_google_safe_browsing")

    @property
    @pulumi.getter(name="enableThreatIntelligenceFeeds")
    def enable_threat_intelligence_feeds(self) -> builtins.bool:
        """
        Whether to filter content using threat intelligence feeds.
        """
        return pulumi.get(self, "enable_threat_intelligence_feeds")


@pulumi.output_type
class GetTwingateGroupsGroupResult(dict):
    def __init__(__self__, *,
                 id: builtins.str,
                 is_active: builtins.bool,
                 name: builtins.str,
                 security_policy_id: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str id: The ID of the Group
        :param builtins.bool is_active: Indicates if the Group is active
        :param builtins.str name: The name of the Group
        :param builtins.str security_policy_id: The Security Policy assigned to the Group.
        :param builtins.str type: The type of the Group
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_active", is_active)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "security_policy_id", security_policy_id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the Group
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> builtins.bool:
        """
        Indicates if the Group is active
        """
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the Group
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="securityPolicyId")
    def security_policy_id(self) -> builtins.str:
        """
        The Security Policy assigned to the Group.
        """
        return pulumi.get(self, "security_policy_id")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the Group
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetTwingateRemoteNetworksRemoteNetworkResult(dict):
    def __init__(__self__, *,
                 id: builtins.str,
                 location: builtins.str,
                 type: builtins.str,
                 name: Optional[builtins.str] = None):
        """
        :param builtins.str id: The ID of the Remote Network.
        :param builtins.str location: The location of the Remote Network. Must be one of the following: AWS, AZURE, GOOGLE*CLOUD, ON*PREMISE, OTHER.
        :param builtins.str type: The type of the Remote Network. Must be one of the following: REGULAR, EXIT.
        :param builtins.str name: The name of the Remote Network.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the Remote Network.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> builtins.str:
        """
        The location of the Remote Network. Must be one of the following: AWS, AZURE, GOOGLE*CLOUD, ON*PREMISE, OTHER.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The type of the Remote Network. Must be one of the following: REGULAR, EXIT.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        The name of the Remote Network.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetTwingateResourceProtocolsResult(dict):
    def __init__(__self__, *,
                 allow_icmp: builtins.bool,
                 tcp: Optional['outputs.GetTwingateResourceProtocolsTcpResult'] = None,
                 udp: Optional['outputs.GetTwingateResourceProtocolsUdpResult'] = None):
        """
        :param builtins.bool allow_icmp: Whether to allow ICMP (ping) traffic
        """
        pulumi.set(__self__, "allow_icmp", allow_icmp)
        if tcp is not None:
            pulumi.set(__self__, "tcp", tcp)
        if udp is not None:
            pulumi.set(__self__, "udp", udp)

    @property
    @pulumi.getter(name="allowIcmp")
    def allow_icmp(self) -> builtins.bool:
        """
        Whether to allow ICMP (ping) traffic
        """
        return pulumi.get(self, "allow_icmp")

    @property
    @pulumi.getter
    def tcp(self) -> Optional['outputs.GetTwingateResourceProtocolsTcpResult']:
        return pulumi.get(self, "tcp")

    @property
    @pulumi.getter
    def udp(self) -> Optional['outputs.GetTwingateResourceProtocolsUdpResult']:
        return pulumi.get(self, "udp")


@pulumi.output_type
class GetTwingateResourceProtocolsTcpResult(dict):
    def __init__(__self__, *,
                 policy: builtins.str,
                 ports: Sequence[builtins.str]):
        """
        :param builtins.str policy: Whether to allow or deny all ports, or restrict protocol access within certain port ranges: Can be `RESTRICTED` (only listed ports are allowed), `ALLOW_ALL`, or `DENY_ALL`
        :param Sequence[builtins.str] ports: List of port ranges between 1 and 65535 inclusive, in the format `100-200` for a range, or `8080` for a single port
        """
        pulumi.set(__self__, "policy", policy)
        pulumi.set(__self__, "ports", ports)

    @property
    @pulumi.getter
    def policy(self) -> builtins.str:
        """
        Whether to allow or deny all ports, or restrict protocol access within certain port ranges: Can be `RESTRICTED` (only listed ports are allowed), `ALLOW_ALL`, or `DENY_ALL`
        """
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def ports(self) -> Sequence[builtins.str]:
        """
        List of port ranges between 1 and 65535 inclusive, in the format `100-200` for a range, or `8080` for a single port
        """
        return pulumi.get(self, "ports")


@pulumi.output_type
class GetTwingateResourceProtocolsUdpResult(dict):
    def __init__(__self__, *,
                 policy: builtins.str,
                 ports: Sequence[builtins.str]):
        """
        :param builtins.str policy: Whether to allow or deny all ports, or restrict protocol access within certain port ranges: Can be `RESTRICTED` (only listed ports are allowed), `ALLOW_ALL`, or `DENY_ALL`
        :param Sequence[builtins.str] ports: List of port ranges between 1 and 65535 inclusive, in the format `100-200` for a range, or `8080` for a single port
        """
        pulumi.set(__self__, "policy", policy)
        pulumi.set(__self__, "ports", ports)

    @property
    @pulumi.getter
    def policy(self) -> builtins.str:
        """
        Whether to allow or deny all ports, or restrict protocol access within certain port ranges: Can be `RESTRICTED` (only listed ports are allowed), `ALLOW_ALL`, or `DENY_ALL`
        """
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def ports(self) -> Sequence[builtins.str]:
        """
        List of port ranges between 1 and 65535 inclusive, in the format `100-200` for a range, or `8080` for a single port
        """
        return pulumi.get(self, "ports")


@pulumi.output_type
class GetTwingateResourcesResourceResult(dict):
    def __init__(__self__, *,
                 address: builtins.str,
                 approval_mode: builtins.str,
                 id: builtins.str,
                 name: builtins.str,
                 protocols: 'outputs.GetTwingateResourcesResourceProtocolsResult',
                 remote_network_id: builtins.str,
                 tags: Mapping[str, builtins.str],
                 usage_based_autolock_duration_days: builtins.int):
        """
        :param builtins.str address: The Resource's IP/CIDR or FQDN/DNS zone
        :param builtins.str approval_mode: The Approval Mode of the Resource. The valid values are `AUTOMATIC` and `MANUAL`.
        :param builtins.str id: The id of the Resource
        :param builtins.str name: The name of the Resource
        :param 'GetTwingateResourcesResourceProtocolsArgs' protocols: Restrict access to certain protocols and ports. By default or when this argument is not defined, there is no restriction, and all protocols and ports are allowed.
        :param builtins.str remote_network_id: Remote Network ID where the Resource lives
        :param Mapping[str, builtins.str] tags: The `tags` attribute consists of a key-value pairs that correspond with tags to be set on the resource.
        :param builtins.int usage_based_autolock_duration_days: The number of days that the Resource will be locked after the last successful login.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "approval_mode", approval_mode)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "protocols", protocols)
        pulumi.set(__self__, "remote_network_id", remote_network_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "usage_based_autolock_duration_days", usage_based_autolock_duration_days)

    @property
    @pulumi.getter
    def address(self) -> builtins.str:
        """
        The Resource's IP/CIDR or FQDN/DNS zone
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="approvalMode")
    def approval_mode(self) -> builtins.str:
        """
        The Approval Mode of the Resource. The valid values are `AUTOMATIC` and `MANUAL`.
        """
        return pulumi.get(self, "approval_mode")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The id of the Resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the Resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocols(self) -> 'outputs.GetTwingateResourcesResourceProtocolsResult':
        """
        Restrict access to certain protocols and ports. By default or when this argument is not defined, there is no restriction, and all protocols and ports are allowed.
        """
        return pulumi.get(self, "protocols")

    @property
    @pulumi.getter(name="remoteNetworkId")
    def remote_network_id(self) -> builtins.str:
        """
        Remote Network ID where the Resource lives
        """
        return pulumi.get(self, "remote_network_id")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, builtins.str]:
        """
        The `tags` attribute consists of a key-value pairs that correspond with tags to be set on the resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="usageBasedAutolockDurationDays")
    def usage_based_autolock_duration_days(self) -> builtins.int:
        """
        The number of days that the Resource will be locked after the last successful login.
        """
        return pulumi.get(self, "usage_based_autolock_duration_days")


@pulumi.output_type
class GetTwingateResourcesResourceProtocolsResult(dict):
    def __init__(__self__, *,
                 allow_icmp: builtins.bool,
                 tcp: 'outputs.GetTwingateResourcesResourceProtocolsTcpResult',
                 udp: 'outputs.GetTwingateResourcesResourceProtocolsUdpResult'):
        """
        :param builtins.bool allow_icmp: Whether to allow ICMP (ping) traffic
        """
        pulumi.set(__self__, "allow_icmp", allow_icmp)
        pulumi.set(__self__, "tcp", tcp)
        pulumi.set(__self__, "udp", udp)

    @property
    @pulumi.getter(name="allowIcmp")
    def allow_icmp(self) -> builtins.bool:
        """
        Whether to allow ICMP (ping) traffic
        """
        return pulumi.get(self, "allow_icmp")

    @property
    @pulumi.getter
    def tcp(self) -> 'outputs.GetTwingateResourcesResourceProtocolsTcpResult':
        return pulumi.get(self, "tcp")

    @property
    @pulumi.getter
    def udp(self) -> 'outputs.GetTwingateResourcesResourceProtocolsUdpResult':
        return pulumi.get(self, "udp")


@pulumi.output_type
class GetTwingateResourcesResourceProtocolsTcpResult(dict):
    def __init__(__self__, *,
                 policy: builtins.str,
                 ports: Sequence[builtins.str]):
        """
        :param builtins.str policy: Whether to allow or deny all ports, or restrict protocol access within certain port ranges: Can be `RESTRICTED` (only listed ports are allowed), `ALLOW_ALL`, or `DENY_ALL`
        :param Sequence[builtins.str] ports: List of port ranges between 1 and 65535 inclusive, in the format `100-200` for a range, or `8080` for a single port
        """
        pulumi.set(__self__, "policy", policy)
        pulumi.set(__self__, "ports", ports)

    @property
    @pulumi.getter
    def policy(self) -> builtins.str:
        """
        Whether to allow or deny all ports, or restrict protocol access within certain port ranges: Can be `RESTRICTED` (only listed ports are allowed), `ALLOW_ALL`, or `DENY_ALL`
        """
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def ports(self) -> Sequence[builtins.str]:
        """
        List of port ranges between 1 and 65535 inclusive, in the format `100-200` for a range, or `8080` for a single port
        """
        return pulumi.get(self, "ports")


@pulumi.output_type
class GetTwingateResourcesResourceProtocolsUdpResult(dict):
    def __init__(__self__, *,
                 policy: builtins.str,
                 ports: Sequence[builtins.str]):
        """
        :param builtins.str policy: Whether to allow or deny all ports, or restrict protocol access within certain port ranges: Can be `RESTRICTED` (only listed ports are allowed), `ALLOW_ALL`, or `DENY_ALL`
        :param Sequence[builtins.str] ports: List of port ranges between 1 and 65535 inclusive, in the format `100-200` for a range, or `8080` for a single port
        """
        pulumi.set(__self__, "policy", policy)
        pulumi.set(__self__, "ports", ports)

    @property
    @pulumi.getter
    def policy(self) -> builtins.str:
        """
        Whether to allow or deny all ports, or restrict protocol access within certain port ranges: Can be `RESTRICTED` (only listed ports are allowed), `ALLOW_ALL`, or `DENY_ALL`
        """
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def ports(self) -> Sequence[builtins.str]:
        """
        List of port ranges between 1 and 65535 inclusive, in the format `100-200` for a range, or `8080` for a single port
        """
        return pulumi.get(self, "ports")


@pulumi.output_type
class GetTwingateSecurityPoliciesSecurityPolicyResult(dict):
    def __init__(__self__, *,
                 id: builtins.str,
                 name: builtins.str):
        """
        :param builtins.str id: Return a matching Security Policy by its ID. The ID for the Security Policy can be obtained from the Admin API or the URL string in the Admin Console.
        :param builtins.str name: Return a Security Policy that exactly matches this name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Return a matching Security Policy by its ID. The ID for the Security Policy can be obtained from the Admin API or the URL string in the Admin Console.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Return a Security Policy that exactly matches this name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetTwingateServiceAccountsServiceAccountResult(dict):
    def __init__(__self__, *,
                 id: builtins.str,
                 key_ids: Sequence[builtins.str],
                 name: builtins.str,
                 resource_ids: Sequence[builtins.str]):
        """
        :param builtins.str id: ID of the Service Account resource
        :param Sequence[builtins.str] key_ids: List of twingate*service*account_key IDs that are assigned to the Service Account.
        :param builtins.str name: Name of the Service Account
        :param Sequence[builtins.str] resource_ids: List of TwingateResource IDs that the Service Account is assigned to.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "key_ids", key_ids)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resource_ids", resource_ids)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        ID of the Service Account resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keyIds")
    def key_ids(self) -> Sequence[builtins.str]:
        """
        List of twingate*service*account_key IDs that are assigned to the Service Account.
        """
        return pulumi.get(self, "key_ids")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Service Account
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resourceIds")
    def resource_ids(self) -> Sequence[builtins.str]:
        """
        List of TwingateResource IDs that the Service Account is assigned to.
        """
        return pulumi.get(self, "resource_ids")


@pulumi.output_type
class GetTwingateUsersUserResult(dict):
    def __init__(__self__, *,
                 email: builtins.str,
                 first_name: builtins.str,
                 id: builtins.str,
                 last_name: builtins.str,
                 role: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str email: The email address of the User
        :param builtins.str first_name: The first name of the User
        :param builtins.str id: The ID of the User
        :param builtins.str last_name: The last name of the User
        :param builtins.str role: Indicates the User's role. Either ADMIN, DEVOPS, SUPPORT, or MEMBER.
        :param builtins.str type: Indicates the User's type. Either MANUAL or SYNCED.
        """
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "first_name", first_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_name", last_name)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def email(self) -> builtins.str:
        """
        The email address of the User
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> builtins.str:
        """
        The first name of the User
        """
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The ID of the User
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> builtins.str:
        """
        The last name of the User
        """
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def role(self) -> builtins.str:
        """
        Indicates the User's role. Either ADMIN, DEVOPS, SUPPORT, or MEMBER.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Indicates the User's type. Either MANUAL or SYNCED.
        """
        return pulumi.get(self, "type")


