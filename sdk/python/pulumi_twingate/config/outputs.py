# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'Cache',
    'DefaultTags',
]

@pulumi.output_type
class Cache(dict):
    def __init__(__self__, *,
                 groups_enabled: Optional[builtins.bool] = None,
                 resource_enabled: Optional[builtins.bool] = None):
        """
        :param builtins.bool groups_enabled: Specifies whether the provider should cache groups. The default value is `true`.
        :param builtins.bool resource_enabled: Specifies whether the provider should cache resources. The default value is `true`.
        """
        if groups_enabled is not None:
            pulumi.set(__self__, "groups_enabled", groups_enabled)
        if resource_enabled is not None:
            pulumi.set(__self__, "resource_enabled", resource_enabled)

    @property
    @pulumi.getter(name="groupsEnabled")
    def groups_enabled(self) -> Optional[builtins.bool]:
        """
        Specifies whether the provider should cache groups. The default value is `true`.
        """
        return pulumi.get(self, "groups_enabled")

    @property
    @pulumi.getter(name="resourceEnabled")
    def resource_enabled(self) -> Optional[builtins.bool]:
        """
        Specifies whether the provider should cache resources. The default value is `true`.
        """
        return pulumi.get(self, "resource_enabled")


@pulumi.output_type
class DefaultTags(dict):
    def __init__(__self__, *,
                 tags: Optional[Mapping[str, builtins.str]] = None):
        """
        :param Mapping[str, builtins.str] tags: A map of key-value pair tags to be set on all resources by default.
        """
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, builtins.str]]:
        """
        A map of key-value pair tags to be set on all resources by default.
        """
        return pulumi.get(self, "tags")


