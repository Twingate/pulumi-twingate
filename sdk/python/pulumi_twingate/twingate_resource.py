# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TwingateResourceArgs', 'TwingateResource']

@pulumi.input_type
class TwingateResourceArgs:
    def __init__(__self__, *,
                 address: pulumi.Input[builtins.str],
                 remote_network_id: pulumi.Input[builtins.str],
                 access_groups: Optional[pulumi.Input[Sequence[pulumi.Input['TwingateResourceAccessGroupArgs']]]] = None,
                 access_services: Optional[pulumi.Input[Sequence[pulumi.Input['TwingateResourceAccessServiceArgs']]]] = None,
                 alias: Optional[pulumi.Input[builtins.str]] = None,
                 approval_mode: Optional[pulumi.Input[builtins.str]] = None,
                 is_active: Optional[pulumi.Input[builtins.bool]] = None,
                 is_authoritative: Optional[pulumi.Input[builtins.bool]] = None,
                 is_browser_shortcut_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 is_visible: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 protocols: Optional[pulumi.Input['TwingateResourceProtocolsArgs']] = None,
                 security_policy_id: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 usage_based_autolock_duration_days: Optional[pulumi.Input[builtins.int]] = None):
        """
        The set of arguments for constructing a TwingateResource resource.
        :param pulumi.Input[builtins.str] address: The Resource's IP/CIDR or FQDN/DNS zone
        :param pulumi.Input[builtins.str] remote_network_id: Remote Network ID where the Resource lives
        :param pulumi.Input[Sequence[pulumi.Input['TwingateResourceAccessGroupArgs']]] access_groups: Restrict access to certain group
        :param pulumi.Input[Sequence[pulumi.Input['TwingateResourceAccessServiceArgs']]] access_services: Restrict access to certain service account
        :param pulumi.Input[builtins.str] alias: Set a DNS alias address for the Resource. Must be a DNS-valid name string.
        :param pulumi.Input[builtins.str] approval_mode: This will set the approval model for the Resource. The valid values are `AUTOMATIC` and `MANUAL`.
        :param pulumi.Input[builtins.bool] is_active: Set the resource as active or inactive. Default is `true`.
        :param pulumi.Input[builtins.bool] is_browser_shortcut_enabled: Controls whether an "Open in Browser" shortcut will be shown for this Resource in the Twingate Client. Default is `false`.
        :param pulumi.Input[builtins.bool] is_visible: Controls whether this Resource will be visible in the main Resource list in the Twingate Client. Default is `true`.
        :param pulumi.Input[builtins.str] name: The name of the Resource
        :param pulumi.Input['TwingateResourceProtocolsArgs'] protocols: Restrict access to certain protocols and ports. By default or when this argument is not defined, there is no restriction, and all protocols and ports are allowed.
        :param pulumi.Input[builtins.str] security_policy_id: The ID of a `get_twingate_security_policy` to set as this Resource's Security Policy. Default is `Default Policy`.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: The `tags` attribute consists of a key-value pairs that correspond with tags to be set on the resource.
        :param pulumi.Input[builtins.int] usage_based_autolock_duration_days: The usage-based auto-lock duration for the Resource (in days).
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "remote_network_id", remote_network_id)
        if access_groups is not None:
            pulumi.set(__self__, "access_groups", access_groups)
        if access_services is not None:
            pulumi.set(__self__, "access_services", access_services)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if approval_mode is not None:
            pulumi.set(__self__, "approval_mode", approval_mode)
        if is_active is not None:
            pulumi.set(__self__, "is_active", is_active)
        if is_authoritative is not None:
            pulumi.set(__self__, "is_authoritative", is_authoritative)
        if is_browser_shortcut_enabled is not None:
            pulumi.set(__self__, "is_browser_shortcut_enabled", is_browser_shortcut_enabled)
        if is_visible is not None:
            pulumi.set(__self__, "is_visible", is_visible)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if security_policy_id is not None:
            pulumi.set(__self__, "security_policy_id", security_policy_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if usage_based_autolock_duration_days is not None:
            pulumi.set(__self__, "usage_based_autolock_duration_days", usage_based_autolock_duration_days)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Input[builtins.str]:
        """
        The Resource's IP/CIDR or FQDN/DNS zone
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="remoteNetworkId")
    def remote_network_id(self) -> pulumi.Input[builtins.str]:
        """
        Remote Network ID where the Resource lives
        """
        return pulumi.get(self, "remote_network_id")

    @remote_network_id.setter
    def remote_network_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "remote_network_id", value)

    @property
    @pulumi.getter(name="accessGroups")
    def access_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TwingateResourceAccessGroupArgs']]]]:
        """
        Restrict access to certain group
        """
        return pulumi.get(self, "access_groups")

    @access_groups.setter
    def access_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TwingateResourceAccessGroupArgs']]]]):
        pulumi.set(self, "access_groups", value)

    @property
    @pulumi.getter(name="accessServices")
    def access_services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TwingateResourceAccessServiceArgs']]]]:
        """
        Restrict access to certain service account
        """
        return pulumi.get(self, "access_services")

    @access_services.setter
    def access_services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TwingateResourceAccessServiceArgs']]]]):
        pulumi.set(self, "access_services", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Set a DNS alias address for the Resource. Must be a DNS-valid name string.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter(name="approvalMode")
    def approval_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This will set the approval model for the Resource. The valid values are `AUTOMATIC` and `MANUAL`.
        """
        return pulumi.get(self, "approval_mode")

    @approval_mode.setter
    def approval_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "approval_mode", value)

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Set the resource as active or inactive. Default is `true`.
        """
        return pulumi.get(self, "is_active")

    @is_active.setter
    def is_active(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_active", value)

    @property
    @pulumi.getter(name="isAuthoritative")
    def is_authoritative(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "is_authoritative")

    @is_authoritative.setter
    def is_authoritative(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_authoritative", value)

    @property
    @pulumi.getter(name="isBrowserShortcutEnabled")
    def is_browser_shortcut_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Controls whether an "Open in Browser" shortcut will be shown for this Resource in the Twingate Client. Default is `false`.
        """
        return pulumi.get(self, "is_browser_shortcut_enabled")

    @is_browser_shortcut_enabled.setter
    def is_browser_shortcut_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_browser_shortcut_enabled", value)

    @property
    @pulumi.getter(name="isVisible")
    def is_visible(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Controls whether this Resource will be visible in the main Resource list in the Twingate Client. Default is `true`.
        """
        return pulumi.get(self, "is_visible")

    @is_visible.setter
    def is_visible(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_visible", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the Resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def protocols(self) -> Optional[pulumi.Input['TwingateResourceProtocolsArgs']]:
        """
        Restrict access to certain protocols and ports. By default or when this argument is not defined, there is no restriction, and all protocols and ports are allowed.
        """
        return pulumi.get(self, "protocols")

    @protocols.setter
    def protocols(self, value: Optional[pulumi.Input['TwingateResourceProtocolsArgs']]):
        pulumi.set(self, "protocols", value)

    @property
    @pulumi.getter(name="securityPolicyId")
    def security_policy_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The ID of a `get_twingate_security_policy` to set as this Resource's Security Policy. Default is `Default Policy`.
        """
        return pulumi.get(self, "security_policy_id")

    @security_policy_id.setter
    def security_policy_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "security_policy_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        The `tags` attribute consists of a key-value pairs that correspond with tags to be set on the resource.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="usageBasedAutolockDurationDays")
    def usage_based_autolock_duration_days(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The usage-based auto-lock duration for the Resource (in days).
        """
        return pulumi.get(self, "usage_based_autolock_duration_days")

    @usage_based_autolock_duration_days.setter
    def usage_based_autolock_duration_days(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "usage_based_autolock_duration_days", value)


@pulumi.input_type
class _TwingateResourceState:
    def __init__(__self__, *,
                 access_groups: Optional[pulumi.Input[Sequence[pulumi.Input['TwingateResourceAccessGroupArgs']]]] = None,
                 access_services: Optional[pulumi.Input[Sequence[pulumi.Input['TwingateResourceAccessServiceArgs']]]] = None,
                 address: Optional[pulumi.Input[builtins.str]] = None,
                 alias: Optional[pulumi.Input[builtins.str]] = None,
                 approval_mode: Optional[pulumi.Input[builtins.str]] = None,
                 is_active: Optional[pulumi.Input[builtins.bool]] = None,
                 is_authoritative: Optional[pulumi.Input[builtins.bool]] = None,
                 is_browser_shortcut_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 is_visible: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 protocols: Optional[pulumi.Input['TwingateResourceProtocolsArgs']] = None,
                 remote_network_id: Optional[pulumi.Input[builtins.str]] = None,
                 security_policy_id: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 usage_based_autolock_duration_days: Optional[pulumi.Input[builtins.int]] = None):
        """
        Input properties used for looking up and filtering TwingateResource resources.
        :param pulumi.Input[Sequence[pulumi.Input['TwingateResourceAccessGroupArgs']]] access_groups: Restrict access to certain group
        :param pulumi.Input[Sequence[pulumi.Input['TwingateResourceAccessServiceArgs']]] access_services: Restrict access to certain service account
        :param pulumi.Input[builtins.str] address: The Resource's IP/CIDR or FQDN/DNS zone
        :param pulumi.Input[builtins.str] alias: Set a DNS alias address for the Resource. Must be a DNS-valid name string.
        :param pulumi.Input[builtins.str] approval_mode: This will set the approval model for the Resource. The valid values are `AUTOMATIC` and `MANUAL`.
        :param pulumi.Input[builtins.bool] is_active: Set the resource as active or inactive. Default is `true`.
        :param pulumi.Input[builtins.bool] is_browser_shortcut_enabled: Controls whether an "Open in Browser" shortcut will be shown for this Resource in the Twingate Client. Default is `false`.
        :param pulumi.Input[builtins.bool] is_visible: Controls whether this Resource will be visible in the main Resource list in the Twingate Client. Default is `true`.
        :param pulumi.Input[builtins.str] name: The name of the Resource
        :param pulumi.Input['TwingateResourceProtocolsArgs'] protocols: Restrict access to certain protocols and ports. By default or when this argument is not defined, there is no restriction, and all protocols and ports are allowed.
        :param pulumi.Input[builtins.str] remote_network_id: Remote Network ID where the Resource lives
        :param pulumi.Input[builtins.str] security_policy_id: The ID of a `get_twingate_security_policy` to set as this Resource's Security Policy. Default is `Default Policy`.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: The `tags` attribute consists of a key-value pairs that correspond with tags to be set on the resource.
        :param pulumi.Input[builtins.int] usage_based_autolock_duration_days: The usage-based auto-lock duration for the Resource (in days).
        """
        if access_groups is not None:
            pulumi.set(__self__, "access_groups", access_groups)
        if access_services is not None:
            pulumi.set(__self__, "access_services", access_services)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if approval_mode is not None:
            pulumi.set(__self__, "approval_mode", approval_mode)
        if is_active is not None:
            pulumi.set(__self__, "is_active", is_active)
        if is_authoritative is not None:
            pulumi.set(__self__, "is_authoritative", is_authoritative)
        if is_browser_shortcut_enabled is not None:
            pulumi.set(__self__, "is_browser_shortcut_enabled", is_browser_shortcut_enabled)
        if is_visible is not None:
            pulumi.set(__self__, "is_visible", is_visible)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if remote_network_id is not None:
            pulumi.set(__self__, "remote_network_id", remote_network_id)
        if security_policy_id is not None:
            pulumi.set(__self__, "security_policy_id", security_policy_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if usage_based_autolock_duration_days is not None:
            pulumi.set(__self__, "usage_based_autolock_duration_days", usage_based_autolock_duration_days)

    @property
    @pulumi.getter(name="accessGroups")
    def access_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TwingateResourceAccessGroupArgs']]]]:
        """
        Restrict access to certain group
        """
        return pulumi.get(self, "access_groups")

    @access_groups.setter
    def access_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TwingateResourceAccessGroupArgs']]]]):
        pulumi.set(self, "access_groups", value)

    @property
    @pulumi.getter(name="accessServices")
    def access_services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TwingateResourceAccessServiceArgs']]]]:
        """
        Restrict access to certain service account
        """
        return pulumi.get(self, "access_services")

    @access_services.setter
    def access_services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TwingateResourceAccessServiceArgs']]]]):
        pulumi.set(self, "access_services", value)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The Resource's IP/CIDR or FQDN/DNS zone
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Set a DNS alias address for the Resource. Must be a DNS-valid name string.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter(name="approvalMode")
    def approval_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        This will set the approval model for the Resource. The valid values are `AUTOMATIC` and `MANUAL`.
        """
        return pulumi.get(self, "approval_mode")

    @approval_mode.setter
    def approval_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "approval_mode", value)

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Set the resource as active or inactive. Default is `true`.
        """
        return pulumi.get(self, "is_active")

    @is_active.setter
    def is_active(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_active", value)

    @property
    @pulumi.getter(name="isAuthoritative")
    def is_authoritative(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "is_authoritative")

    @is_authoritative.setter
    def is_authoritative(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_authoritative", value)

    @property
    @pulumi.getter(name="isBrowserShortcutEnabled")
    def is_browser_shortcut_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Controls whether an "Open in Browser" shortcut will be shown for this Resource in the Twingate Client. Default is `false`.
        """
        return pulumi.get(self, "is_browser_shortcut_enabled")

    @is_browser_shortcut_enabled.setter
    def is_browser_shortcut_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_browser_shortcut_enabled", value)

    @property
    @pulumi.getter(name="isVisible")
    def is_visible(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Controls whether this Resource will be visible in the main Resource list in the Twingate Client. Default is `true`.
        """
        return pulumi.get(self, "is_visible")

    @is_visible.setter
    def is_visible(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_visible", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the Resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def protocols(self) -> Optional[pulumi.Input['TwingateResourceProtocolsArgs']]:
        """
        Restrict access to certain protocols and ports. By default or when this argument is not defined, there is no restriction, and all protocols and ports are allowed.
        """
        return pulumi.get(self, "protocols")

    @protocols.setter
    def protocols(self, value: Optional[pulumi.Input['TwingateResourceProtocolsArgs']]):
        pulumi.set(self, "protocols", value)

    @property
    @pulumi.getter(name="remoteNetworkId")
    def remote_network_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Remote Network ID where the Resource lives
        """
        return pulumi.get(self, "remote_network_id")

    @remote_network_id.setter
    def remote_network_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "remote_network_id", value)

    @property
    @pulumi.getter(name="securityPolicyId")
    def security_policy_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The ID of a `get_twingate_security_policy` to set as this Resource's Security Policy. Default is `Default Policy`.
        """
        return pulumi.get(self, "security_policy_id")

    @security_policy_id.setter
    def security_policy_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "security_policy_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        The `tags` attribute consists of a key-value pairs that correspond with tags to be set on the resource.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="usageBasedAutolockDurationDays")
    def usage_based_autolock_duration_days(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The usage-based auto-lock duration for the Resource (in days).
        """
        return pulumi.get(self, "usage_based_autolock_duration_days")

    @usage_based_autolock_duration_days.setter
    def usage_based_autolock_duration_days(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "usage_based_autolock_duration_days", value)


class TwingateResource(pulumi.CustomResource):

    pulumi_type = "twingate:index/twingateResource:TwingateResource"

    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TwingateResourceAccessGroupArgs', 'TwingateResourceAccessGroupArgsDict']]]]] = None,
                 access_services: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TwingateResourceAccessServiceArgs', 'TwingateResourceAccessServiceArgsDict']]]]] = None,
                 address: Optional[pulumi.Input[builtins.str]] = None,
                 alias: Optional[pulumi.Input[builtins.str]] = None,
                 approval_mode: Optional[pulumi.Input[builtins.str]] = None,
                 is_active: Optional[pulumi.Input[builtins.bool]] = None,
                 is_authoritative: Optional[pulumi.Input[builtins.bool]] = None,
                 is_browser_shortcut_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 is_visible: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 protocols: Optional[pulumi.Input[Union['TwingateResourceProtocolsArgs', 'TwingateResourceProtocolsArgsDict']]] = None,
                 remote_network_id: Optional[pulumi.Input[builtins.str]] = None,
                 security_policy_id: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 usage_based_autolock_duration_days: Optional[pulumi.Input[builtins.int]] = None,
                 __props__=None):
        """
        Resources in Twingate represent servers on the private network that clients can connect to. Resources can be defined by IP, CIDR range, FQDN, or DNS zone. For more information, see the Twingate [documentation](https://docs.twingate.com/docs/resources-and-access-nodes).

        ## Import

        ```sh
        $ pulumi import twingate:index/twingateResource:TwingateResource resource UmVzb3VyY2U6MzQwNDQ3
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['TwingateResourceAccessGroupArgs', 'TwingateResourceAccessGroupArgsDict']]]] access_groups: Restrict access to certain group
        :param pulumi.Input[Sequence[pulumi.Input[Union['TwingateResourceAccessServiceArgs', 'TwingateResourceAccessServiceArgsDict']]]] access_services: Restrict access to certain service account
        :param pulumi.Input[builtins.str] address: The Resource's IP/CIDR or FQDN/DNS zone
        :param pulumi.Input[builtins.str] alias: Set a DNS alias address for the Resource. Must be a DNS-valid name string.
        :param pulumi.Input[builtins.str] approval_mode: This will set the approval model for the Resource. The valid values are `AUTOMATIC` and `MANUAL`.
        :param pulumi.Input[builtins.bool] is_active: Set the resource as active or inactive. Default is `true`.
        :param pulumi.Input[builtins.bool] is_browser_shortcut_enabled: Controls whether an "Open in Browser" shortcut will be shown for this Resource in the Twingate Client. Default is `false`.
        :param pulumi.Input[builtins.bool] is_visible: Controls whether this Resource will be visible in the main Resource list in the Twingate Client. Default is `true`.
        :param pulumi.Input[builtins.str] name: The name of the Resource
        :param pulumi.Input[Union['TwingateResourceProtocolsArgs', 'TwingateResourceProtocolsArgsDict']] protocols: Restrict access to certain protocols and ports. By default or when this argument is not defined, there is no restriction, and all protocols and ports are allowed.
        :param pulumi.Input[builtins.str] remote_network_id: Remote Network ID where the Resource lives
        :param pulumi.Input[builtins.str] security_policy_id: The ID of a `get_twingate_security_policy` to set as this Resource's Security Policy. Default is `Default Policy`.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: The `tags` attribute consists of a key-value pairs that correspond with tags to be set on the resource.
        :param pulumi.Input[builtins.int] usage_based_autolock_duration_days: The usage-based auto-lock duration for the Resource (in days).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TwingateResourceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resources in Twingate represent servers on the private network that clients can connect to. Resources can be defined by IP, CIDR range, FQDN, or DNS zone. For more information, see the Twingate [documentation](https://docs.twingate.com/docs/resources-and-access-nodes).

        ## Import

        ```sh
        $ pulumi import twingate:index/twingateResource:TwingateResource resource UmVzb3VyY2U6MzQwNDQ3
        ```

        :param str resource_name: The name of the resource.
        :param TwingateResourceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TwingateResourceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TwingateResourceAccessGroupArgs', 'TwingateResourceAccessGroupArgsDict']]]]] = None,
                 access_services: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TwingateResourceAccessServiceArgs', 'TwingateResourceAccessServiceArgsDict']]]]] = None,
                 address: Optional[pulumi.Input[builtins.str]] = None,
                 alias: Optional[pulumi.Input[builtins.str]] = None,
                 approval_mode: Optional[pulumi.Input[builtins.str]] = None,
                 is_active: Optional[pulumi.Input[builtins.bool]] = None,
                 is_authoritative: Optional[pulumi.Input[builtins.bool]] = None,
                 is_browser_shortcut_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 is_visible: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 protocols: Optional[pulumi.Input[Union['TwingateResourceProtocolsArgs', 'TwingateResourceProtocolsArgsDict']]] = None,
                 remote_network_id: Optional[pulumi.Input[builtins.str]] = None,
                 security_policy_id: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 usage_based_autolock_duration_days: Optional[pulumi.Input[builtins.int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TwingateResourceArgs.__new__(TwingateResourceArgs)

            __props__.__dict__["access_groups"] = access_groups
            __props__.__dict__["access_services"] = access_services
            if address is None and not opts.urn:
                raise TypeError("Missing required property 'address'")
            __props__.__dict__["address"] = address
            __props__.__dict__["alias"] = alias
            __props__.__dict__["approval_mode"] = approval_mode
            __props__.__dict__["is_active"] = is_active
            __props__.__dict__["is_authoritative"] = is_authoritative
            __props__.__dict__["is_browser_shortcut_enabled"] = is_browser_shortcut_enabled
            __props__.__dict__["is_visible"] = is_visible
            __props__.__dict__["name"] = name
            __props__.__dict__["protocols"] = protocols
            if remote_network_id is None and not opts.urn:
                raise TypeError("Missing required property 'remote_network_id'")
            __props__.__dict__["remote_network_id"] = remote_network_id
            __props__.__dict__["security_policy_id"] = security_policy_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["usage_based_autolock_duration_days"] = usage_based_autolock_duration_days
        super(TwingateResource, __self__).__init__(
            'twingate:index/twingateResource:TwingateResource',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TwingateResourceAccessGroupArgs', 'TwingateResourceAccessGroupArgsDict']]]]] = None,
            access_services: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TwingateResourceAccessServiceArgs', 'TwingateResourceAccessServiceArgsDict']]]]] = None,
            address: Optional[pulumi.Input[builtins.str]] = None,
            alias: Optional[pulumi.Input[builtins.str]] = None,
            approval_mode: Optional[pulumi.Input[builtins.str]] = None,
            is_active: Optional[pulumi.Input[builtins.bool]] = None,
            is_authoritative: Optional[pulumi.Input[builtins.bool]] = None,
            is_browser_shortcut_enabled: Optional[pulumi.Input[builtins.bool]] = None,
            is_visible: Optional[pulumi.Input[builtins.bool]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            protocols: Optional[pulumi.Input[Union['TwingateResourceProtocolsArgs', 'TwingateResourceProtocolsArgsDict']]] = None,
            remote_network_id: Optional[pulumi.Input[builtins.str]] = None,
            security_policy_id: Optional[pulumi.Input[builtins.str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
            usage_based_autolock_duration_days: Optional[pulumi.Input[builtins.int]] = None) -> 'TwingateResource':
        """
        Get an existing TwingateResource resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['TwingateResourceAccessGroupArgs', 'TwingateResourceAccessGroupArgsDict']]]] access_groups: Restrict access to certain group
        :param pulumi.Input[Sequence[pulumi.Input[Union['TwingateResourceAccessServiceArgs', 'TwingateResourceAccessServiceArgsDict']]]] access_services: Restrict access to certain service account
        :param pulumi.Input[builtins.str] address: The Resource's IP/CIDR or FQDN/DNS zone
        :param pulumi.Input[builtins.str] alias: Set a DNS alias address for the Resource. Must be a DNS-valid name string.
        :param pulumi.Input[builtins.str] approval_mode: This will set the approval model for the Resource. The valid values are `AUTOMATIC` and `MANUAL`.
        :param pulumi.Input[builtins.bool] is_active: Set the resource as active or inactive. Default is `true`.
        :param pulumi.Input[builtins.bool] is_browser_shortcut_enabled: Controls whether an "Open in Browser" shortcut will be shown for this Resource in the Twingate Client. Default is `false`.
        :param pulumi.Input[builtins.bool] is_visible: Controls whether this Resource will be visible in the main Resource list in the Twingate Client. Default is `true`.
        :param pulumi.Input[builtins.str] name: The name of the Resource
        :param pulumi.Input[Union['TwingateResourceProtocolsArgs', 'TwingateResourceProtocolsArgsDict']] protocols: Restrict access to certain protocols and ports. By default or when this argument is not defined, there is no restriction, and all protocols and ports are allowed.
        :param pulumi.Input[builtins.str] remote_network_id: Remote Network ID where the Resource lives
        :param pulumi.Input[builtins.str] security_policy_id: The ID of a `get_twingate_security_policy` to set as this Resource's Security Policy. Default is `Default Policy`.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: The `tags` attribute consists of a key-value pairs that correspond with tags to be set on the resource.
        :param pulumi.Input[builtins.int] usage_based_autolock_duration_days: The usage-based auto-lock duration for the Resource (in days).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TwingateResourceState.__new__(_TwingateResourceState)

        __props__.__dict__["access_groups"] = access_groups
        __props__.__dict__["access_services"] = access_services
        __props__.__dict__["address"] = address
        __props__.__dict__["alias"] = alias
        __props__.__dict__["approval_mode"] = approval_mode
        __props__.__dict__["is_active"] = is_active
        __props__.__dict__["is_authoritative"] = is_authoritative
        __props__.__dict__["is_browser_shortcut_enabled"] = is_browser_shortcut_enabled
        __props__.__dict__["is_visible"] = is_visible
        __props__.__dict__["name"] = name
        __props__.__dict__["protocols"] = protocols
        __props__.__dict__["remote_network_id"] = remote_network_id
        __props__.__dict__["security_policy_id"] = security_policy_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["usage_based_autolock_duration_days"] = usage_based_autolock_duration_days
        return TwingateResource(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessGroups")
    def access_groups(self) -> pulumi.Output[Optional[Sequence['outputs.TwingateResourceAccessGroup']]]:
        """
        Restrict access to certain group
        """
        return pulumi.get(self, "access_groups")

    @property
    @pulumi.getter(name="accessServices")
    def access_services(self) -> pulumi.Output[Optional[Sequence['outputs.TwingateResourceAccessService']]]:
        """
        Restrict access to certain service account
        """
        return pulumi.get(self, "access_services")

    @property
    @pulumi.getter
    def address(self) -> pulumi.Output[builtins.str]:
        """
        The Resource's IP/CIDR or FQDN/DNS zone
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def alias(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Set a DNS alias address for the Resource. Must be a DNS-valid name string.
        """
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="approvalMode")
    def approval_mode(self) -> pulumi.Output[builtins.str]:
        """
        This will set the approval model for the Resource. The valid values are `AUTOMATIC` and `MANUAL`.
        """
        return pulumi.get(self, "approval_mode")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> pulumi.Output[builtins.bool]:
        """
        Set the resource as active or inactive. Default is `true`.
        """
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter(name="isAuthoritative")
    def is_authoritative(self) -> pulumi.Output[builtins.bool]:
        return pulumi.get(self, "is_authoritative")

    @property
    @pulumi.getter(name="isBrowserShortcutEnabled")
    def is_browser_shortcut_enabled(self) -> pulumi.Output[builtins.bool]:
        """
        Controls whether an "Open in Browser" shortcut will be shown for this Resource in the Twingate Client. Default is `false`.
        """
        return pulumi.get(self, "is_browser_shortcut_enabled")

    @property
    @pulumi.getter(name="isVisible")
    def is_visible(self) -> pulumi.Output[builtins.bool]:
        """
        Controls whether this Resource will be visible in the main Resource list in the Twingate Client. Default is `true`.
        """
        return pulumi.get(self, "is_visible")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The name of the Resource
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocols(self) -> pulumi.Output['outputs.TwingateResourceProtocols']:
        """
        Restrict access to certain protocols and ports. By default or when this argument is not defined, there is no restriction, and all protocols and ports are allowed.
        """
        return pulumi.get(self, "protocols")

    @property
    @pulumi.getter(name="remoteNetworkId")
    def remote_network_id(self) -> pulumi.Output[builtins.str]:
        """
        Remote Network ID where the Resource lives
        """
        return pulumi.get(self, "remote_network_id")

    @property
    @pulumi.getter(name="securityPolicyId")
    def security_policy_id(self) -> pulumi.Output[builtins.str]:
        """
        The ID of a `get_twingate_security_policy` to set as this Resource's Security Policy. Default is `Default Policy`.
        """
        return pulumi.get(self, "security_policy_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, builtins.str]]:
        """
        The `tags` attribute consists of a key-value pairs that correspond with tags to be set on the resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="usageBasedAutolockDurationDays")
    def usage_based_autolock_duration_days(self) -> pulumi.Output[builtins.int]:
        """
        The usage-based auto-lock duration for the Resource (in days).
        """
        return pulumi.get(self, "usage_based_autolock_duration_days")

